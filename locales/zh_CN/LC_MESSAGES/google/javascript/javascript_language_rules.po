# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Style Guide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Style Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-19 01:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../google/javascript/javascript_language_rules.rst:2
msgid "Javascript语言规范"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:5
msgid "var关键字"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:7
msgid "总是用 ``var`` 关键字定义变量。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:10
#: ../../google/javascript/javascript_language_rules.rst:24
msgid "描述"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:12
msgid ""
"如果不显式使用 ``var`` "
"关键字定义变量，变量会进入到全局上下文中，可能会和已有的变量发生冲突。另外，如果不使用var声明，很难说变量存在的作用域是哪个（可能在局部作用域里，也可能在document或者window上）。所以，要一直使用"
" ``var`` 关键字定义变量。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:15
msgid "常量"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:17
msgid "使用字母全部大写（如 ``NAMES_LIKE_THIS`` ）的方式命名"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:19
msgid "可以使用 ``@const`` 来标记一个常量 *指针* （指向变量或属性，自身不可变）"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:21
#, python-format
msgid ""
"由于IE的兼容问题，不要使用 `const关键字 <https://developer.mozilla.org/en-"
"US/docs/Web/JavaScript/Reference/Statements/const?redirectlocale=en-"
"US&redirectslug=JavaScript%2FReference%2FStatements%2Fconst>`_"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:27
msgid "常量值"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:29
msgid "如果一个值是恒定的，它命名中的字母要全部大写（如 ``CONSTANT_VALUE_CASE`` ）。字母全部大写意味着这个值不可以被改写。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:31
msgid "原始类型（ ``number`` 、 ``string`` 、 ``boolean`` ）是常量值。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:33
msgid "对象的表现会更主观一些，当它们没有暴露出变化的时候，应该认为它们是常量。但是这个不是由编译器决定的。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:36
msgid "常量指针（变量和属性）"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:38
#, python-format
msgid ""
"用 ``@const`` 注释的变量和属性意味着它是不能更改的。使用const关键字可以保证在编译的时候保持一致。使用 `const "
"<https://developer.mozilla.org/en-"
"US/docs/Web/JavaScript/Reference/Statements/const?redirectlocale=en-"
"US&redirectslug=JavaScript%2FReference%2FStatements%2Fconst>`_ "
"效果相同，但是由于IE的兼容问题，我们不使用const关键字。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:40
msgid "另外，不应该修改用 ``@const`` 注释的方法。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:43
msgid "例子"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:45
msgid "注意， ``@const`` 不一定是常量值，但命名类似 ``CONSTANT_VALUE_CASE`` 的 *一定* 是常量指针。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:55
msgid ""
"1分钟60秒永远也不会改变，这是个常量。全部大写的命名意味其为常量值，所以它不能被重写。 开源的编译器允许这个符号被重写，这是因为 *没有* "
"``@const`` 标记。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:66
msgid "在这个例子中，指针没有变过，但是值却是可以变化的，所以这里用了驼峰式的命名，而不是全部大写的命名。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:69
msgid "分号"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:71
msgid "一定要使用分号。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:73
msgid "依靠语句间隐式的分割，可能会造成细微的调试的问题，千万不要这样做。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:75
msgid "很多时候不写分号是很危险的："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:103
msgid "发生了什么？"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:105
msgid "js错误。返回42的函数运行了，因为后面有一对括号，而且传入的参数是一个方法，然后返回的42被调用，导致出错了。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:107
msgid ""
"你可能会得到一个“no sush property in undefined”的错误，因为在执行的时候，解释器将会尝试执行 "
"``x[normalVersion, ffVersion][isIE]()`` 这个方法。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:109
msgid ""
"``die`` 这个方法只有在 ``resultOfOperation()`` 是 ``NaN`` 的时候执行，并且 "
"``THINGS_TO_EAT`` 将会被赋值为 ``die()`` 的结果。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:112
#: ../../google/javascript/javascript_language_rules.rst:252
msgid "为什么？"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:114
msgid "js语句要求以分号结尾，除非能够正确地推断分号的位置。在这个例子当中，函数声明、对象和数组字面量被写在了一个语句当中。右括号（\")\"、\"}\"、\"]\"）不足以证明这条语句已经结束了，如果下一个字符是运算符或者\"(\"、\"{\"、\"[\"，js将不会结束语句。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:116
msgid "这个错误让人震惊，所以一定要确保用分号结束语句。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:119
msgid "澄清：分号和函数"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:121
msgid "函数表达式后面要分号结束，但是函数声明就不需要。例如："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:134
msgid "嵌套函数"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:136
msgid "可以使用。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:138
msgid "嵌套函数非常有用，比如在创建持续任务或者隐藏工具方法的时候。可以放心的使用。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:141
msgid "块内函数声明"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:143
msgid "不要使用块内函数声明。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:145
#: ../../google/javascript/javascript_language_rules.rst:433
#: ../../google/javascript/javascript_language_rules.rst:530
msgid "不要这样做："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:153
msgid ""
"虽然大多数脚本引擎支持功能区块内声明，但ECMAScript并未认可（见 `ECMA-262 <http://www.ecma-"
"international.org/publications/standards/Ecma-262.htm>`_ "
"，第13条和第14）。若与他人的及EcmaScript所建议的不一致，即可视为不好的实现方式。ECMAScript只允许函数声明语句列表, "
"在根语句列表脚本或者函数。相反，使用一个变量初始化函数表达式在块内定义一个函数块："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:162
msgid "异常"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:164
msgid "可以抛出异常。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:166
msgid "如果你做一些比较复杂的项目你基本上无法避免异常，比如使用一个应用程序开发框架。可以大胆试一试。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:169
msgid "自定义异常"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:171
msgid "可以自定义异常。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:173
msgid "如果没有自定义异常，返回的错误信息来自一个有返回值的函数是难处理的，是不雅的。坏的解决方案包括传递引用的类型来保存错误信息或总是返回有一个潜在的错误成员的对象。这些基本上为原始的异常处理hack。在适当的时候使用自定义的异常。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:176
msgid "标准功能"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:178
msgid "总是优先于非标准功能。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:180
msgid ""
"为了最大的可移植性和兼容性，总是使用标准功能而不是非标准功能（例如，采用 `string.charAt(3)` 而非 `string[3]` "
"，用DOM的功能访问元素而不是使用特定于一个具体应用的简写）。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:183
msgid "原始类型的包装对象"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:185
msgid "没有理由使用原始类型的包装对象，更何况他们是危险的："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:194
msgid "不要这样做！"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:196
msgid "然而类型转换是可以的。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:207
msgid "这是非常有用的进行数字、字符串和布尔值转换的方式。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:210
msgid "多重的原型继承"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:212
msgid "不可取。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:214
msgid ""
"多重原型继承是Javascript实现继承的方式。如果你有一个以用户定义的class B作为原型的用户自定义class "
"D，则得到多重原型继承。这样的继承出现容易但难以正确创造！"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:216
msgid ""
"出于这个原因，最好是使用 `Closure库 "
"<https://developers.google.com/closure/library/?csw=1>`_ 中的 "
"``goog.inherits()`` 或类似的东西。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:230
msgid "方法和属性定义"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:232
msgid ""
"``/**构造函数*/ function SomeConstructor() { this.someProperty = 1; } "
"Foo.prototype.someMethod = function() { ... };``"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:234
msgid "虽然有多种使用“new”关键词来创建对象方法和属性的途径，首选的创建方法的途径是："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:242
msgid "其他特性的首选创建方式是在构造函数中初始化字段："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:254
msgid ""
"当前的JavaScript引擎优化基于一个对象的“形状”， `给对象添加一个属性（包括覆盖原型设置的值）改变了形式，会降低性能 "
"<https://developers.google.com/v8/design#prop_access>`_ 。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:257
msgid "删除"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:259
msgid "请使用 ``this.foo = null`` 。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:267
msgid "而不是："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:275
msgid ""
"在现代的JavaScript引擎中，改变一个对象属性的数量比重新分配值慢得多。应该避免删除关键字，除非有必要从一个对象的迭代的关键字列表删除一个属性，或改变"
" ``if (key in obj)`` 结果。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:278
msgid "闭包"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:280
msgid "可以使用，但是要小心。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:282
msgid ""
"创建闭包可能是JS最有用的和经常被忽视的功能。在 `这里 <http://jibbering.com/faq/notes/closures/>`_"
" 很好地描述说明了闭包的工作。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:284
msgid "要记住的一件事情，一个闭包的指针指向包含它的范围。因此，附加一个闭包的DOM元素，可以创建一个循环引用，所以，内存会泄漏。例如，下面的代码："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:292
msgid "闭包能保持元素a和b的引用即使它从未使用。因为元素还保持对闭包的一个引用，我们有一个循环引用，不会被垃圾收集清理。在这些情况下，代码的结构可以如下："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:305
msgid "eval()函数"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:307
msgid "只用于反序列化（如评估RPC响应）。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:309
msgid ""
"若用于 ``eval()`` 的字符串含有用户输入，则 ``eval()`` 会造成混乱的语义，使用它有风险。通常有一个更好 "
"更清晰、更安全的方式来编写你的代码，所以一般是不会允许其使用的。然而，eval相对比非eval使反序列化更容易，因此它的使用是可以接受的（例如评估RPC响应）。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:312
msgid "反序列化是将一系列字节存到内存中的数据结构转化过程。例如，你可能会写的对象是："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:330
msgid "将这些数据读入内存跟得出文件的字符串表示形式一样容易。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:332
msgid ""
"同样， ``eval()`` 函数可以简化解码RPC的返回值。例如，您可以使用 ``XMLHttpRequest`` "
"生成RPC，在响应时服务器返回JavaScript："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:349
msgid "with() {}"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:351
msgid "不建议使用。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:353
msgid ""
"使用 ``with`` 会影响程序的语义。因为 ``with`` "
"的目标对象可能会含有和局部变量冲突的属性，使你程序的语义发生很大的变化。例如，这是做什么用？"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:362
msgid ""
"答案：什么都有可能。局部变量 ``x`` 可能会被 ``foo`` "
"的一个属性覆盖，它甚至可能有setter方法，在此情况下将其赋值为3可能会执行很多其他代码。不要使用 ``with`` 。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:365
msgid "this"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:367
msgid "只在构造函数对象、方法，和创建闭包的时候使用。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:369
msgid ""
"``this`` 的语义可能会非常诡异。有时它指向全局对象（很多时候）、调用者的作用域链（在 ``eval`` "
"里）、DOM树的一个节点（当使用HTML属性来做为事件句柄时）、新创建的对象（在一个构造函数中）、或者其他的对象（如果函数被 ``call()``"
" 或 ``apply()`` 方式调用）。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:371
msgid "正因为 ``this`` 很容易被弄错，故将其使用限制在以下必须的地方："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:373
msgid "在构造函数中"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:375
msgid "在对象的方法中（包括闭包的创建）"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:378
msgid "for-in 循环"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:380
msgid "只使用在对象、映射、哈希的键值迭代中。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:382
msgid ""
"``for-in`` 循环经常被不正确的用在元素数组的循环中。由于并不是从 ``0`` 到 ``length-1`` "
"进行循环，而是遍历对象中和它原型链上的所有的键，所以很容易出错。这里有一些失败的例子："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:408
msgid "在数组循环时常用的一般方式："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:420
msgid "关联数组"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:422
msgid "不要将映射，哈希，关联数组当作一般数组来使用。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:424
msgid "不允许使用关联数组……确切的说在数组，你不可以使用非数字的索引。如果你需要一个映射或者哈希，在这种情况下你应该使用对象来代替数组，因为在功能上你真正需要的是对象的特性而不是数组的。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:426
msgid "数组仅仅是用来拓展对象的（像在JS中你曾经使用过的 ``Date`` 、 ``RegExp`` 和 ``String`` 对象一样的）。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:429
msgid "多行的字符串字面量"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:431
#: ../../google/javascript/javascript_language_rules.rst:528
msgid "不要使用。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:444
msgid "在编译时每一行头部的空白符不会被安全地去除掉；斜线后的空格也会导致棘手的问题；虽然大部分脚本引擎都会支持，但是它不是ECMAScript规范的一部分。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:446
msgid "使用字符串连接来代替："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:458
msgid "数组和对象字面量"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:460
msgid "建议使用。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:462
msgid "使用数组和对象字面量来代替数组和对象构造函数。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:464
msgid "数组构造函数容易在参数上出错。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:482
msgid "由此，如果有人将代码从2个参数变成了一个参数，那么这个数组就会有一个错误的长度。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:484
msgid "为了避免这种怪异的情况，永远使用可读性更好的数组字面量。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:493
msgid "对象构造函数虽然没有相同的问题，但是对于可读性和一致性，还是应该使用对象字面量。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:505
msgid "应该写成："
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:519
msgid "修改内置对象原型"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:521
msgid "不建议。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:523
msgid ""
"强烈禁止修改如 ``Object.prototype`` 和 ``Array.prototype`` 等对象的原型。修改其他内置原型如 "
"``Function.prototype`` 危险性较小，但在生产环境中还是会引发一些难以调试的问题，也应当避免。"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:526
msgid "Internet Explorer中的条件注释"
msgstr ""

#: ../../google/javascript/javascript_language_rules.rst:538
msgid "条件注释会在运行时改变JavaScript语法树，阻碍自动化工具。"
msgstr ""

