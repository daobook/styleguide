# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Style Guide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Style Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-19 01:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../google/cpp/magic.rst:2
msgid "来自 Google 的奇技"
msgstr ""

#: ../../google/cpp/magic.rst:4
msgid "Google 用了很多自己实现的技巧 / 工具使 C++ 代码更加健壮, 我们使用 C++ 的方式可能和你在其它地方见到的有所不同."
msgstr ""

#: ../../google/cpp/magic.rst:7
msgid "所有权与智能指针"
msgstr ""

#: ../../google/cpp/magic.rst:9 ../../google/cpp/magic.rst:69
msgid "**> 总述**"
msgstr ""

#: ../../google/cpp/magic.rst:11
msgid "动态分配出的对象最好有单一且固定的所有主, 并通过智能指针传递所有权."
msgstr ""

#: ../../google/cpp/magic.rst:13
msgid "**> 定义**"
msgstr ""

#: ../../google/cpp/magic.rst:15
msgid ""
"所有权是一种登记／管理动态内存和其它资源的技术. 动态分配对象的所有主是一个对象或函数, 后者负责确保当前者无用时就自动销毁前者. "
"所有权有时可以共享, 此时就由最后一个所有主来负责销毁它. 甚至也可以不用共享, 在代码中直接把所有权传递给其它对象."
msgstr ""

#: ../../google/cpp/magic.rst:17
msgid ""
"智能指针是一个通过重载 ``*`` 和 ``->`` 运算符以表现得如指针一样的类. 智能指针类型被用来自动化所有权的登记工作, "
"来确保执行销毁义务到位. `std::unique_ptr "
"<http://en.cppreference.com/w/cpp/memory/unique_ptr>`_ 是 C++11 "
"新推出的一种智能指针类型, 用来表示动态分配出的对象的独一无二的所有权; 当 ``std::unique_ptr`` 离开作用域时, "
"对象就会被销毁. ``std::unique_ptr`` 不能被复制, 但可以把它移动（move）给新所有主. `std::shared_ptr "
"<http://en.cppreference.com/w/cpp/memory/shared_ptr>`_ 同样表示动态分配对象的所有权, "
"但可以被共享, 也可以被复制; 对象的所有权由所有复制者共同拥有, 最后一个复制者被销毁时, 对象也会随着被销毁."
msgstr ""

#: ../../google/cpp/magic.rst:19
msgid "**> 优点**"
msgstr ""

#: ../../google/cpp/magic.rst:21
msgid "如果没有清晰、逻辑条理的所有权安排, 不可能管理好动态分配的内存."
msgstr ""

#: ../../google/cpp/magic.rst:23
msgid "传递对象的所有权, 开销比复制来得小, 如果可以复制的话."
msgstr ""

#: ../../google/cpp/magic.rst:25
msgid "传递所有权也比\"借用\"指针或引用来得简单, 毕竟它大大省去了两个用户一起协调对象生命周期的工作."
msgstr ""

#: ../../google/cpp/magic.rst:27
msgid "如果所有权逻辑条理, 有文档且不紊乱的话, 可读性会有很大提升."
msgstr ""

#: ../../google/cpp/magic.rst:29
msgid "可以不用手动完成所有权的登记工作, 大大简化了代码, 也免去了一大波错误之恼."
msgstr ""

#: ../../google/cpp/magic.rst:31
msgid "对于 const 对象来说, 智能指针简单易用, 也比深度复制高效."
msgstr ""

#: ../../google/cpp/magic.rst:33
msgid "**> 缺点**"
msgstr ""

#: ../../google/cpp/magic.rst:35
msgid ""
"不得不用指针（不管是智能的还是原生的）来表示和传递所有权. 指针语义可要比值语义复杂得许多了, 特别是在 API 里：这时不光要操心所有权, "
"还要顾及别名, 生命周期, 可变性以及其它大大小小的问题."
msgstr ""

#: ../../google/cpp/magic.rst:37
msgid "其实值语义的开销经常被高估, 所以所有权传递带来的性能提升不一定能弥补可读性和复杂度的损失."
msgstr ""

#: ../../google/cpp/magic.rst:39
msgid "如果 API 依赖所有权的传递, 就会害得客户端不得不用单一的内存管理模型."
msgstr ""

#: ../../google/cpp/magic.rst:41
msgid "如果使用智能指针, 那么资源释放发生的位置就会变得不那么明显."
msgstr ""

#: ../../google/cpp/magic.rst:43
msgid "``std::unique_ptr`` 的所有权传递原理是 C++11 的 move 语法, 后者毕竟是刚刚推出的, 容易迷惑程序员."
msgstr ""

#: ../../google/cpp/magic.rst:45
msgid "如果原本的所有权设计已经够完善了, 那么若要引入所有权共享机制, 可能不得不重构整个系统."
msgstr ""

#: ../../google/cpp/magic.rst:47
msgid "所有权共享机制的登记工作在运行时进行, 开销可能相当大."
msgstr ""

#: ../../google/cpp/magic.rst:49
msgid "某些极端情况下 (例如循环引用), 所有权被共享的对象永远不会被销毁."
msgstr ""

#: ../../google/cpp/magic.rst:51
msgid "智能指针并不能够完全代替原生指针."
msgstr ""

#: ../../google/cpp/magic.rst:53
msgid "**> 结论**"
msgstr ""

#: ../../google/cpp/magic.rst:55
msgid ""
"如果必须使用动态分配, 那么更倾向于将所有权保持在分配者手中. 如果其他地方要使用这个对象, 最好传递它的拷贝, "
"或者传递一个不用改变所有权的指针或引用. 倾向于使用 ``std::unique_ptr`` 来明确所有权传递, 例如："
msgstr ""

#: ../../google/cpp/magic.rst:62
msgid ""
"如果没有很好的理由, 则不要使用共享所有权. 这里的理由可以是为了避免开销昂贵的拷贝操作, 但是只有当性能提升非常明显, "
"并且操作的对象是不可变的（比如说 ``std::shared_ptr<const Foo>`` ）时候, 才能这么做. 如果确实要使用共享所有权,"
" 建议于使用 ``std::shared_ptr`` ."
msgstr ""

#: ../../google/cpp/magic.rst:64
msgid "不要使用 ``std::auto_ptr``, 使用 ``std::unique_ptr`` 代替它."
msgstr ""

#: ../../google/cpp/magic.rst:67
msgid "Cpplint"
msgstr ""

#: ../../google/cpp/magic.rst:71
msgid "使用 ``cpplint.py`` 检查风格错误."
msgstr ""

#: ../../google/cpp/magic.rst:73
msgid "**> 说明**"
msgstr ""

#: ../../google/cpp/magic.rst:75
msgid ""
"``cpplint.py`` 是一个用来分析源文件, 能检查出多种风格错误的工具. 它不并完美, 甚至还会漏报和误报, "
"但它仍然是一个非常有用的工具. 在行尾加 ``// NOLINT``, 或在上一行加 ``// NOLINTNEXTLINE``, 可以忽略报错."
msgstr ""

#: ../../google/cpp/magic.rst:77
msgid ""
"某些项目会指导你如何使用他们的项目工具运行 ``cpplint.py``. 如果你参与的项目没有提供, 你可以单独下载 `cpplint.py "
"<http://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py>`_."
msgstr ""

#: ../../google/cpp/magic.rst:81
msgid "译者（acgtyrant）笔记"
msgstr ""

#: ../../google/cpp/magic.rst:83
msgid "把智能指针当成对象来看待的话, 就很好领会它与所指对象之间的关系了."
msgstr ""

#: ../../google/cpp/magic.rst:84
msgid "原来 Rust 的 Ownership 思想是受到了 C++ 智能指针的很大启发啊."
msgstr ""

#: ../../google/cpp/magic.rst:85
msgid ""
"``scoped_ptr`` 和 ``auto_ptr`` 已过时.  现在是 ``shared_ptr`` 和 ``uniqued_ptr`` "
"的天下了."
msgstr ""

#: ../../google/cpp/magic.rst:86
msgid "按本文来说, 似乎除了智能指针, 还有其它所有权机制, 值得留意."
msgstr ""

#: ../../google/cpp/magic.rst:87
msgid "Arch Linux 用户注意了, AUR 有对 cpplint 打包."
msgstr ""

