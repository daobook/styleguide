# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Style Guide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Style Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-19 01:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../google/cpp/formatting.rst:2
msgid "格式"
msgstr ""

#: ../../google/cpp/formatting.rst:4
msgid ""
"每个人都可能有自己的代码风格和格式, 但如果一个项目中的所有人都遵循同一风格的话, 这个项目就能更顺利地进行. "
"每个人未必能同意下述的每一处格式规则, 而且其中的不少规则需要一定时间的适应, 但整个项目服从统一的编程风格是很重要的, "
"只有这样才能让所有人轻松地阅读和理解代码."
msgstr ""

#: ../../google/cpp/formatting.rst:6
msgid ""
"为了帮助你正确的格式化代码, 我们写了一个 `emacs 配置文件 "
"<https://raw.githubusercontent.com/google/styleguide/gh-"
"pages/google-c-style.el>`_."
msgstr ""

#: ../../google/cpp/formatting.rst:11
msgid "行长度"
msgstr ""

#: ../../google/cpp/formatting.rst:13 ../../google/cpp/formatting.rst:40
#: ../../google/cpp/formatting.rst:59 ../../google/cpp/formatting.rst:70
#: ../../google/cpp/formatting.rst:177 ../../google/cpp/formatting.rst:206
#: ../../google/cpp/formatting.rst:270 ../../google/cpp/formatting.rst:309
#: ../../google/cpp/formatting.rst:407 ../../google/cpp/formatting.rst:461
#: ../../google/cpp/formatting.rst:505 ../../google/cpp/formatting.rst:526
#: ../../google/cpp/formatting.rst:549 ../../google/cpp/formatting.rst:583
#: ../../google/cpp/formatting.rst:617 ../../google/cpp/formatting.rst:664
#: ../../google/cpp/formatting.rst:702 ../../google/cpp/formatting.rst:743
#: ../../google/cpp/formatting.rst:828
msgid "**总述**"
msgstr ""

#: ../../google/cpp/formatting.rst:15
msgid "每一行代码字符数不超过 80."
msgstr ""

#: ../../google/cpp/formatting.rst:17
msgid "我们也认识到这条规则是有争议的, 但很多已有代码都遵照这一规则, 因此我们感觉一致性更重要."
msgstr ""

#: ../../google/cpp/formatting.rst:19
msgid "**优点**"
msgstr ""

#: ../../google/cpp/formatting.rst:21
msgid ""
"提倡该原则的人认为强迫他们调整编辑器窗口大小是很野蛮的行为. 很多人同时并排开几个代码窗口, 根本没有多余的空间拉伸窗口. "
"大家都把窗口最大尺寸加以限定, 并且 80 列宽是传统标准. 那么为什么要改变呢?"
msgstr ""

#: ../../google/cpp/formatting.rst:23
msgid "**缺点**"
msgstr ""

#: ../../google/cpp/formatting.rst:25
msgid ""
"反对该原则的人则认为更宽的代码行更易阅读. 80 列的限制是上个世纪 60 年代的大型机的古板缺陷; 现代设备具有更宽的显示屏, "
"可以很轻松地显示更多代码."
msgstr ""

#: ../../google/cpp/formatting.rst:27
msgid "**结论**"
msgstr ""

#: ../../google/cpp/formatting.rst:29
msgid "80 个字符是最大值."
msgstr ""

#: ../../google/cpp/formatting.rst:31
msgid ""
"如果无法在不伤害易读性的条件下进行断行, 那么注释行可以超过 80 个字符, 这样可以方便复制粘贴. 例如, 带有命令示例或 URL 的行可以超过"
" 80 个字符."
msgstr ""

#: ../../google/cpp/formatting.rst:33
msgid "包含长路径的 ``#include`` 语句可以超出80列."
msgstr ""

#: ../../google/cpp/formatting.rst:35
msgid ":ref:`头文件保护 <define-guard>` 可以无视该原则."
msgstr ""

#: ../../google/cpp/formatting.rst:38
msgid "非 ASCII 字符"
msgstr ""

#: ../../google/cpp/formatting.rst:42
msgid "尽量不使用非 ASCII 字符, 使用时必须使用 UTF-8 编码."
msgstr ""

#: ../../google/cpp/formatting.rst:44 ../../google/cpp/formatting.rst:63
#: ../../google/cpp/formatting.rst:74 ../../google/cpp/formatting.rst:181
#: ../../google/cpp/formatting.rst:210 ../../google/cpp/formatting.rst:274
#: ../../google/cpp/formatting.rst:313 ../../google/cpp/formatting.rst:411
#: ../../google/cpp/formatting.rst:465 ../../google/cpp/formatting.rst:509
#: ../../google/cpp/formatting.rst:530 ../../google/cpp/formatting.rst:553
#: ../../google/cpp/formatting.rst:587 ../../google/cpp/formatting.rst:621
#: ../../google/cpp/formatting.rst:668 ../../google/cpp/formatting.rst:706
#: ../../google/cpp/formatting.rst:747 ../../google/cpp/formatting.rst:832
msgid "**说明**"
msgstr ""

#: ../../google/cpp/formatting.rst:46
msgid ""
"即使是英文, 也不应将用户界面的文本硬编码到源代码中, 因此非 ASCII 字符应当很少被用到. 特殊情况下可以适当包含此类字符. 例如, "
"代码分析外部数据文件时, 可以适当硬编码数据文件中作为分隔符的非 ASCII 字符串; 更常见的是 (不需要本地化的) 单元测试代码可能包含非 "
"ASCII 字符串. 此类情况下, 应使用 UTF-8 编码, 因为很多工具都可以理解和处理 UTF-8 编码."
msgstr ""

#: ../../google/cpp/formatting.rst:48
msgid ""
"十六进制编码也可以, 能增强可读性的情况下尤其鼓励 —— 比如 ``\"\\xEF\\xBB\\xBF\"``, 或者更简洁地写作 "
"``u8\"\\uFEFF\"``, 在 Unicode 中是 *零宽度 无间断* 的间隔符号, 如果不用十六进制直接放在 UTF-8 "
"格式的源文件中, 是看不到的."
msgstr ""

#: ../../google/cpp/formatting.rst:50
msgid "(Yang.Y 注: ``\"\\xEF\\xBB\\xBF\"`` 通常用作 UTF-8 with BOM 编码标记)"
msgstr ""

#: ../../google/cpp/formatting.rst:52
msgid ""
"使用 ``u8`` 前缀把带 ``uXXXX`` 转义序列的字符串字面值编码成 UTF-8. 不要用在本身就带 UTF-8 字符的字符串字面值上,"
" 因为如果编译器不把源代码识别成 UTF-8, 输出就会出错."
msgstr ""

#: ../../google/cpp/formatting.rst:54
msgid ""
"别用 C++11 的 ``char16_t`` 和 ``char32_t``, 它们和 UTF-8 文本没有关系, ``wchar_t`` 同理,"
" 除非你写的代码要调用 Windows API, 后者广泛使用了 ``wchar_t``."
msgstr ""

#: ../../google/cpp/formatting.rst:57
msgid "空格还是制表位"
msgstr ""

#: ../../google/cpp/formatting.rst:61
msgid "只使用空格, 每次缩进 2 个空格."
msgstr ""

#: ../../google/cpp/formatting.rst:65
msgid "我们使用空格缩进. 不要在代码中使用制表符. 你应该设置编辑器将制表符转为空格."
msgstr ""

#: ../../google/cpp/formatting.rst:68
msgid "函数声明与定义"
msgstr ""

#: ../../google/cpp/formatting.rst:72
msgid ""
"返回类型和函数名在同一行, 参数也尽量放在同一行, 如果放不下就对形参分行, 分行方式与 :ref:`函数调用 <function-calls>`"
" 一致."
msgstr ""

#: ../../google/cpp/formatting.rst:76
msgid "函数看上去像这样:"
msgstr ""

#: ../../google/cpp/formatting.rst:85
msgid "如果同一行文本太多, 放不下所有参数:"
msgstr ""

#: ../../google/cpp/formatting.rst:95
msgid "甚至连第一个参数都放不下:"
msgstr ""

#: ../../google/cpp/formatting.rst:107
msgid "注意以下几点:"
msgstr ""

#: ../../google/cpp/formatting.rst:109
msgid "使用好的参数名."
msgstr ""

#: ../../google/cpp/formatting.rst:111
msgid "只有在参数未被使用或者其用途非常明显时, 才能省略参数名."
msgstr ""

#: ../../google/cpp/formatting.rst:113
msgid "如果返回类型和函数名在一行放不下, 分行."
msgstr ""

#: ../../google/cpp/formatting.rst:115
msgid "如果返回类型与函数声明或定义分行了, 不要缩进."
msgstr ""

#: ../../google/cpp/formatting.rst:117
msgid "左圆括号总是和函数名在同一行."
msgstr ""

#: ../../google/cpp/formatting.rst:119
msgid "函数名和左圆括号间永远没有空格."
msgstr ""

#: ../../google/cpp/formatting.rst:121
msgid "圆括号与参数间没有空格."
msgstr ""

#: ../../google/cpp/formatting.rst:123
msgid "左大括号总在最后一个参数同一行的末尾处, 不另起新行."
msgstr ""

#: ../../google/cpp/formatting.rst:125
msgid "右大括号总是单独位于函数最后一行, 或者与左大括号同一行."
msgstr ""

#: ../../google/cpp/formatting.rst:127
msgid "右圆括号和左大括号间总是有一个空格."
msgstr ""

#: ../../google/cpp/formatting.rst:129
msgid "所有形参应尽可能对齐."
msgstr ""

#: ../../google/cpp/formatting.rst:131
msgid "缺省缩进为 2 个空格."
msgstr ""

#: ../../google/cpp/formatting.rst:133
msgid "换行后的参数保持 4 个空格的缩进."
msgstr ""

#: ../../google/cpp/formatting.rst:135
msgid "未被使用的参数, 或者根据上下文很容易看出其用途的参数, 可以省略参数名:"
msgstr ""

#: ../../google/cpp/formatting.rst:147
msgid "未被使用的参数如果其用途不明显的话, 在函数定义处将参数名注释起来:"
msgstr ""

#: ../../google/cpp/formatting.rst:168
msgid "属性, 和展开为属性的宏, 写在函数声明或定义的最前面, 即返回类型之前:"
msgstr ""

#: ../../google/cpp/formatting.rst:175
msgid "Lambda 表达式"
msgstr ""

#: ../../google/cpp/formatting.rst:179
msgid "Lambda 表达式对形参和函数体的格式化和其他函数一致; 捕获列表同理, 表项用逗号隔开."
msgstr ""

#: ../../google/cpp/formatting.rst:183
msgid "若用引用捕获, 在变量名和 ``&`` 之间不留空格."
msgstr ""

#: ../../google/cpp/formatting.rst:190
msgid "短 lambda 就写得和内联函数一样."
msgstr ""

#: ../../google/cpp/formatting.rst:204
msgid "函数调用"
msgstr ""

#: ../../google/cpp/formatting.rst:208
msgid ""
"要么一行写完函数调用, 要么在圆括号里对参数分行, 要么参数另起一行且缩进四格. 如果没有其它顾虑的话, 尽可能精简行数, "
"比如把多个参数适当地放在同一行里."
msgstr ""

#: ../../google/cpp/formatting.rst:212
msgid "函数调用遵循如下形式："
msgstr ""

#: ../../google/cpp/formatting.rst:218
msgid "如果同一行放不下, 可断为多行, 后面每一行都和第一个实参对齐, 左圆括号后和右圆括号前不要留空格："
msgstr ""

#: ../../google/cpp/formatting.rst:225
msgid "参数也可以放在次行, 缩进四格："
msgstr ""

#: ../../google/cpp/formatting.rst:238
msgid ""
"把多个参数放在同一行以减少函数调用所需的行数, 除非影响到可读性. 有人认为把每个参数都独立成行, 不仅更好读, 而且方便编辑参数. 不过, "
"比起所谓的参数编辑, 我们更看重可读性, 且后者比较好办："
msgstr ""

#: ../../google/cpp/formatting.rst:240
msgid "如果一些参数本身就是略复杂的表达式, 且降低了可读性, 那么可以直接创建临时变量描述该表达式, 并传递给函数："
msgstr ""

#: ../../google/cpp/formatting.rst:247
msgid "或者放着不管, 补充上注释："
msgstr ""

#: ../../google/cpp/formatting.rst:254
msgid "如果某参数独立成行, 对可读性更有帮助的话, 那也可以如此做. 参数的格式处理应当以可读性而非其他作为最重要的原则."
msgstr ""

#: ../../google/cpp/formatting.rst:256
msgid "此外, 如果一系列参数本身就有一定的结构, 可以酌情地按其结构来决定参数格式："
msgstr ""

#: ../../google/cpp/formatting.rst:268
msgid "列表初始化格式"
msgstr ""

#: ../../google/cpp/formatting.rst:272
msgid "您平时怎么格式化函数调用, 就怎么格式化 :ref:`列表初始化 <braced-initializer-list>`."
msgstr ""

#: ../../google/cpp/formatting.rst:276
msgid ""
"如果列表初始化伴随着名字, 比如类型或变量名, 格式化时将将名字视作函数调用名, `{}` 视作函数调用的括号. 如果没有名字, "
"就视作名字长度为零."
msgstr ""

#: ../../google/cpp/formatting.rst:307
msgid "条件语句"
msgstr ""

#: ../../google/cpp/formatting.rst:311
msgid "倾向于不在圆括号内使用空格. 关键字 ``if`` 和 ``else`` 另起一行."
msgstr ""

#: ../../google/cpp/formatting.rst:315
msgid "对基本条件语句有两种可以接受的格式. 一种在圆括号和条件之间有空格, 另一种没有."
msgstr ""

#: ../../google/cpp/formatting.rst:317
msgid ""
"最常见的是没有空格的格式. 哪一种都可以, 最重要的是 *保持一致*. 如果你是在修改一个文件, 参考当前已有格式. 如果是写新的代码, "
"参考目录下或项目中其它文件. 还在犹豫的话, 就不要加空格了."
msgstr ""

#: ../../google/cpp/formatting.rst:329
msgid "如果你更喜欢在圆括号内部加空格:"
msgstr ""

#: ../../google/cpp/formatting.rst:339
msgid "注意所有情况下 ``if`` 和左圆括号间都有个空格. 右圆括号和左大括号之间也要有个空格:"
msgstr ""

#: ../../google/cpp/formatting.rst:351
msgid "如果能增强可读性, 简短的条件语句允许写在同一行. 只有当语句简单并且没有使用 ``else`` 子句时使用:"
msgstr ""

#: ../../google/cpp/formatting.rst:358
msgid "如果语句有 ``else`` 分支则不允许:"
msgstr ""

#: ../../google/cpp/formatting.rst:366
msgid ""
"通常, 单行语句不需要使用大括号, 如果你喜欢用也没问题; 复杂的条件或循环语句用大括号可读性会更好. 也有一些项目要求 ``if`` "
"必须总是使用大括号:"
msgstr ""

#: ../../google/cpp/formatting.rst:377
msgid "但如果语句中某个 ``if-else`` 分支使用了大括号的话, 其它分支也必须使用:"
msgstr ""

#: ../../google/cpp/formatting.rst:405
msgid "循环和开关选择语句"
msgstr ""

#: ../../google/cpp/formatting.rst:409
msgid ""
"``switch`` 语句可以使用大括号分段, 以表明 cases 之间不是连在一起的. 在单语句循环里, 括号可用可不用. 空循环体应使用 "
"``{}`` 或 ``continue``."
msgstr ""

#: ../../google/cpp/formatting.rst:413
msgid "``switch`` 语句中的 ``case`` 块可以使用大括号也可以不用, 取决于你的个人喜好. 如果用的话, 要按照下文所述的方法."
msgstr ""

#: ../../google/cpp/formatting.rst:415
msgid ""
"如果有不满足 ``case`` 条件的枚举值, ``switch`` 应该总是包含一个 ``default`` 匹配 (如果有输入值没有 case"
" 去处理, 编译器将给出 warning). 如果 ``default`` 应该永远执行不到, 简单的加条 ``assert``:"
msgstr ""

#: ../../google/cpp/formatting.rst:433
msgid "在单语句循环里, 括号可用可不用："
msgstr ""

#: ../../google/cpp/formatting.rst:444
msgid "空循环体应使用 ``{}`` 或 ``continue``, 而不是一个简单的分号."
msgstr ""

#: ../../google/cpp/formatting.rst:459
msgid "指针和引用表达式"
msgstr ""

#: ../../google/cpp/formatting.rst:463
msgid "句点或箭头前后不要有空格. 指针/地址操作符 (``*, &``) 之后不能有空格."
msgstr ""

#: ../../google/cpp/formatting.rst:467
msgid "下面是指针和引用表达式的正确使用范例:"
msgstr ""

#: ../../google/cpp/formatting.rst:476
msgid "注意:"
msgstr ""

#: ../../google/cpp/formatting.rst:478
msgid "在访问成员时, 句点或箭头前后没有空格."
msgstr ""

#: ../../google/cpp/formatting.rst:480
msgid "指针操作符 ``*`` 或 ``&`` 后没有空格."
msgstr ""

#: ../../google/cpp/formatting.rst:482
msgid "在声明指针变量或参数时, 星号与类型或变量名紧挨都可以:"
msgstr ""

#: ../../google/cpp/formatting.rst:500
msgid "在单个文件内要保持风格一致, 所以, 如果是修改现有文件, 要遵照该文件的风格."
msgstr ""

#: ../../google/cpp/formatting.rst:503
msgid "布尔表达式"
msgstr ""

#: ../../google/cpp/formatting.rst:507
msgid "如果一个布尔表达式超过 :ref:`标准行宽 <line-length>`, 断行方式要统一一下."
msgstr ""

#: ../../google/cpp/formatting.rst:511
msgid "下例中, 逻辑与 (``&&``) 操作符总位于行尾:"
msgstr ""

#: ../../google/cpp/formatting.rst:521
msgid ""
"注意, 上例的逻辑与 (``&&``) 操作符均位于行尾. 这个格式在 Google 里很常见, 虽然把所有操作符放在开头也可以. "
"可以考虑额外插入圆括号, 合理使用的话对增强可读性是很有帮助的. 此外, 直接用符号形式的操作符, 比如 ``&&`` 和 ``~``, "
"不要用词语形式的 ``and`` 和 ``compl``."
msgstr ""

#: ../../google/cpp/formatting.rst:524
msgid "函数返回值"
msgstr ""

#: ../../google/cpp/formatting.rst:528
msgid "不要在 ``return`` 表达式里加上非必须的圆括号."
msgstr ""

#: ../../google/cpp/formatting.rst:532
msgid "只有在写 ``x = expr`` 要加上括号的时候才在 ``return expr;`` 里使用括号."
msgstr ""

#: ../../google/cpp/formatting.rst:547
msgid "变量及数组初始化"
msgstr ""

#: ../../google/cpp/formatting.rst:551
msgid "用 ``=``, ``()`` 和 ``{}`` 均可."
msgstr ""

#: ../../google/cpp/formatting.rst:555
msgid "您可以用 ``=``, ``()`` 和 ``{}``, 以下的例子都是正确的："
msgstr ""

#: ../../google/cpp/formatting.rst:566
msgid ""
"请务必小心列表初始化 ``{...}`` 用 ``std::initializer_list`` 构造函数初始化出的类型. "
"非空列表初始化就会优先调用 ``std::initializer_list``, 不过空列表初始化除外, 后者原则上会调用默认构造函数. "
"为了强制禁用 ``std::initializer_list`` 构造函数, 请改用括号."
msgstr ""

#: ../../google/cpp/formatting.rst:573
msgid "此外, 列表初始化不允许整型类型的四舍五入, 这可以用来避免一些类型上的编程失误."
msgstr ""

#: ../../google/cpp/formatting.rst:581
msgid "预处理指令"
msgstr ""

#: ../../google/cpp/formatting.rst:585
msgid "预处理指令不要缩进, 从行首开始."
msgstr ""

#: ../../google/cpp/formatting.rst:589
msgid "即使预处理指令位于缩进代码块中, 指令也应从行首开始."
msgstr ""

#: ../../google/cpp/formatting.rst:615
msgid "类格式"
msgstr ""

#: ../../google/cpp/formatting.rst:619
msgid "访问控制块的声明依次序是 ``public:``, ``protected:``, ``private:``, 每个都缩进 1 个空格."
msgstr ""

#: ../../google/cpp/formatting.rst:623
msgid "类声明 (下面的代码中缺少注释, 参考 :ref:`类注释 <class-comments>`) 的基本格式如下:"
msgstr ""

#: ../../google/cpp/formatting.rst:647
msgid "注意事项:"
msgstr ""

#: ../../google/cpp/formatting.rst:649
msgid "所有基类名应在 80 列限制下尽量与子类名放在同一行."
msgstr ""

#: ../../google/cpp/formatting.rst:651
msgid "关键词 ``public:``, ``protected:``, ``private:`` 要缩进 1 个空格."
msgstr ""

#: ../../google/cpp/formatting.rst:653
msgid "除第一个关键词 (一般是 ``public``) 外, 其他关键词前要空一行. 如果类比较小的话也可以不空."
msgstr ""

#: ../../google/cpp/formatting.rst:655
msgid "这些关键词后不要保留空行."
msgstr ""

#: ../../google/cpp/formatting.rst:657
msgid "``public`` 放在最前面, 然后是 ``protected``, 最后是 ``private``."
msgstr ""

#: ../../google/cpp/formatting.rst:659
msgid "关于声明顺序的规则请参考 :ref:`声明顺序 <declaration-order>` 一节."
msgstr ""

#: ../../google/cpp/formatting.rst:662
msgid "构造函数初始值列表"
msgstr ""

#: ../../google/cpp/formatting.rst:666
msgid "构造函数初始化列表放在同一行或按四格缩进并排多行."
msgstr ""

#: ../../google/cpp/formatting.rst:670
msgid "下面两种初始值列表方式都可以接受:"
msgstr ""

#: ../../google/cpp/formatting.rst:700
msgid "命名空间格式化"
msgstr ""

#: ../../google/cpp/formatting.rst:704
msgid "命名空间内容不缩进."
msgstr ""

#: ../../google/cpp/formatting.rst:708
msgid ":ref:`命名空间 <namespaces>` 不要增加额外的缩进层次, 例如:"
msgstr ""

#: ../../google/cpp/formatting.rst:720
msgid "不要在命名空间内缩进:"
msgstr ""

#: ../../google/cpp/formatting.rst:733
msgid "声明嵌套命名空间时, 每个命名空间都独立成行."
msgstr ""

#: ../../google/cpp/formatting.rst:741
msgid "水平留白"
msgstr ""

#: ../../google/cpp/formatting.rst:745
msgid "水平留白的使用根据在代码中的位置决定. 永远不要在行尾添加没意义的留白."
msgstr ""

#: ../../google/cpp/formatting.rst:750
msgid "通用"
msgstr ""

#: ../../google/cpp/formatting.rst:771
msgid ""
"添加冗余的留白会给其他人编辑时造成额外负担. 因此, 行尾不要留空格. 如果确定一行代码已经修改完毕, 将多余的空格去掉; "
"或者在专门清理空格时去掉（尤其是在没有其他人在处理这件事的时候). (Yang.Y 注: 现在大部分代码编辑器稍加设置后, "
"都支持自动删除行首/行尾空格, 如果不支持, 考虑换一款编辑器或 IDE)"
msgstr ""

#: ../../google/cpp/formatting.rst:774
msgid "循环和条件语句"
msgstr ""

#: ../../google/cpp/formatting.rst:794
msgid "操作符"
msgstr ""

#: ../../google/cpp/formatting.rst:814
msgid "模板和转换"
msgstr ""

#: ../../google/cpp/formatting.rst:826
msgid "垂直留白"
msgstr ""

#: ../../google/cpp/formatting.rst:830
msgid "垂直留白越少越好."
msgstr ""

#: ../../google/cpp/formatting.rst:834
msgid ""
"这不仅仅是规则而是原则问题了: 不在万不得已, 不要使用空行. 尤其是: 两个函数定义之间的空行不要超过 2 行, 函数体首尾不要留空行, "
"函数体中也不要随意添加空行."
msgstr ""

#: ../../google/cpp/formatting.rst:836
msgid ""
"基本原则是: 同一屏可以显示的代码越多, 越容易理解程序的控制流. 当然, 过于密集的代码块和过于疏松的代码块同样难看, 这取决于你的判断. "
"但通常是垂直留白越少越好."
msgstr ""

#: ../../google/cpp/formatting.rst:838
msgid "下面的规则可以让加入的空行更有效:"
msgstr ""

#: ../../google/cpp/formatting.rst:840
msgid "函数体内开头或结尾的空行可读性微乎其微."
msgstr ""

#: ../../google/cpp/formatting.rst:842
msgid "在多重 if-else 块里加空行或许有点可读性."
msgstr ""

#: ../../google/cpp/formatting.rst:845
msgid "译者 (YuleFox) 笔记"
msgstr ""

#: ../../google/cpp/formatting.rst:847
msgid "对于代码格式, 因人, 系统而异各有优缺点, 但同一个项目中遵循同一标准还是有必要的;"
msgstr ""

#: ../../google/cpp/formatting.rst:848
msgid "行宽原则上不超过 80 列, 把 22 寸的显示屏都占完, 怎么也说不过去;"
msgstr ""

#: ../../google/cpp/formatting.rst:849
msgid ""
"尽量不使用非 ASCII 字符, 如果使用的话, 参考 UTF-8 格式 (尤其是 UNIX/Linux 下, Windows "
"下可以考虑宽字符), 尽量不将字符串常量耦合到代码中, 比如独立出资源文件, 这不仅仅是风格问题了;"
msgstr ""

#: ../../google/cpp/formatting.rst:850
msgid "UNIX/Linux 下无条件使用空格, MSVC 的话使用 Tab 也无可厚非;"
msgstr ""

#: ../../google/cpp/formatting.rst:851
msgid "函数参数, 逻辑条件, 初始化列表: 要么所有参数和函数名放在同一行, 要么所有参数并排分行;"
msgstr ""

#: ../../google/cpp/formatting.rst:852
msgid "除函数定义的左大括号可以置于行首外, 包括函数/类/结构体/枚举声明, 各种语句的左大括号置于行尾, 所有右大括号独立成行;"
msgstr ""

#: ../../google/cpp/formatting.rst:853
msgid "``.``/``->`` 操作符前后不留空格, ``*``/``&`` 不要前后都留, 一个就可, 靠左靠右依各人喜好;"
msgstr ""

#: ../../google/cpp/formatting.rst:854
msgid "预处理指令/命名空间不使用额外缩进, 类/结构体/枚举/函数/语句使用缩进;"
msgstr ""

#: ../../google/cpp/formatting.rst:855
msgid "初始化用 ``=`` 还是 ``()`` 依个人喜好, 统一就好;"
msgstr ""

#: ../../google/cpp/formatting.rst:856
msgid "``return`` 不要加 ``()``;"
msgstr ""

#: ../../google/cpp/formatting.rst:857
msgid "水平/垂直留白不要滥用, 怎么易读怎么来."
msgstr ""

#: ../../google/cpp/formatting.rst:858
msgid ""
"关于 UNIX/Linux 风格为什么要把左大括号置于行尾 (``.cc`` 文件的函数实现处, 左大括号位于行首), "
"我的理解是代码看上去比较简约, 想想行首除了函数体被一对大括号封在一起之外, 只有右大括号的代码看上去确实也舒服; Windows "
"风格将左大括号置于行首的优点是匹配情况一目了然."
msgstr ""

#: ../../google/cpp/formatting.rst:861
msgid "译者（acgtyrant）笔记"
msgstr ""

#: ../../google/cpp/formatting.rst:863
msgid "80 行限制事实上有助于避免代码可读性失控, 比如超多重嵌套块, 超多重函数调用等等."
msgstr ""

#: ../../google/cpp/formatting.rst:864
msgid "Linux 上设置好了 Locale 就几乎一劳永逸设置好所有开发环境的编码, 不像奇葩的 Windows."
msgstr ""

#: ../../google/cpp/formatting.rst:865
msgid ""
"Google 强调有一对 if-else 时, 不论有没有嵌套, 都要有大括号. Apple 正好 `有栽过跟头 "
"<http://coolshell.cn/articles/11112.html>`_ ."
msgstr ""

#: ../../google/cpp/formatting.rst:866
msgid ""
"其实我主张指针／地址操作符与变量名紧邻, ``int* a, b`` vs ``int *a, b``, 新手会误以为前者的 ``b`` 是 "
"``int *`` 变量, 但后者就不一样了, 高下立判."
msgstr ""

#: ../../google/cpp/formatting.rst:867
msgid ""
"在这风格指南里我才刚知道 C++ 原来还有所谓的 `Alternative operator representations "
"<http://en.cppreference.com/w/cpp/language/operator_alternative>`_, "
"大概没人用吧."
msgstr ""

#: ../../google/cpp/formatting.rst:868
msgid ""
"注意构造函数初始值列表（Constructer Initializer List）与列表初始化（Initializer List）是两码事, "
"我就差点混淆了它们的翻译."
msgstr ""

#: ../../google/cpp/formatting.rst:869
msgid ""
"事实上, 如果您熟悉英语本身的书写规则, 就会发现该风格指南在格式上的规定与英语语法相当一脉相承. 比如普通标点符号和单词后面还有文本的话, "
"总会留一个空格; 特殊符号与单词之间就不用留了, 比如 ``if (true)`` 中的圆括号与 ``true``."
msgstr ""

#: ../../google/cpp/formatting.rst:870
msgid ""
"本风格指南没有明确规定 void 函数里要不要用 return 语句, 不过就 Google 开源项目 leveldb 并没有写; 此外从 `Is"
" a blank return statement at the end of a function whos return type is "
"void necessary? <http://stackoverflow.com/questions/9316717/is-a-blank-"
"return-statement-at-the-end-of-a-function-whos-return-type-is-void-ne>`_ "
"来看, ``return;`` 比 ``return ;`` 更约定俗成（事实上 cpplint 会对后者报错, 指出分号前有多余的空格）, "
"且可用来提前跳出函数栈."
msgstr ""

