# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Style Guide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Style Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-19 01:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../google/typescript/syntax.rst:2
msgid "语法规范"
msgstr ""

#: ../../google/typescript/syntax.rst:7
msgid "标识符"
msgstr ""

#: ../../google/typescript/syntax.rst:12
msgid "命名规范"
msgstr ""

#: ../../google/typescript/syntax.rst:14
msgid ""
"在 TypeScript 中，标识符只能使用 ASCII 码表中的字母、数字、下划线与 ``(``。因此，合法的标识符可以使用正则表达式 "
"``[\\)\\w]+`` 进行匹配。根据标识符的用途不同，使用的命名法也不同，如下表所示："
msgstr ""

#: ../../google/typescript/syntax.rst:17
msgid "命名法"
msgstr ""

#: ../../google/typescript/syntax.rst:17
msgid "分类"
msgstr ""

#: ../../google/typescript/syntax.rst:19
msgid "帕斯卡命名法（ ``UpperCamelCase`` ）"
msgstr ""

#: ../../google/typescript/syntax.rst:19
msgid "类、接口、类型、枚举、装饰器、类型参数"
msgstr ""

#: ../../google/typescript/syntax.rst:20
msgid "驼峰式命名法（ ``lowerCamelCase`` ）"
msgstr ""

#: ../../google/typescript/syntax.rst:20
msgid "变量、参数、函数、方法、属性、模块别名"
msgstr ""

#: ../../google/typescript/syntax.rst:21
msgid "全大写下划线命名法（ ``CONSTANT_CASE``）"
msgstr ""

#: ../../google/typescript/syntax.rst:21
msgid "全局常量、枚举值"
msgstr ""

#: ../../google/typescript/syntax.rst:22
msgid "私有成员命名法（ ``#ident`` ）"
msgstr ""

#: ../../google/typescript/syntax.rst:22
msgid "不允许使用"
msgstr ""

#: ../../google/typescript/syntax.rst:28
msgid "缩写"
msgstr ""

#: ../../google/typescript/syntax.rst:30
msgid ""
"缩写应被视为一个词。例如，应使用 ``loadHttpUrl``，而非 ``loadHTTPURL``。平台有特殊要求的标识符例外，如 "
"``XMLHttpRequest``。"
msgstr ""

#: ../../google/typescript/syntax.rst:35
msgid "美元符号 \\$"
msgstr ""

#: ../../google/typescript/syntax.rst:37
msgid ""
"一般情况下，标识符不应使用 `$`，除非为了与第三方框架的命名规范保持一致。关于 `$` 的使用，可参见 :ref:`ts-naming-"
"style` 一节对 ``Observable`` 类型的说明。"
msgstr ""

#: ../../google/typescript/syntax.rst:42
msgid "类型参数"
msgstr ""

#: ../../google/typescript/syntax.rst:44
msgid ""
"形如 ``Array<T>`` 的类型参数既可以使用单个大写字母（如 ``T``），也可以使用帕斯卡命名法（如 "
"``UpperCamelCase``）。"
msgstr ""

#: ../../google/typescript/syntax.rst:49
msgid "测试用例"
msgstr ""

#: ../../google/typescript/syntax.rst:51
msgid ""
"无论是在 `Closure <https://github.com/google/closure-library>`_ 库的 "
"``testSuites`` 还是 `xUnit <https://xunit.net/>`_ 风格的测试框架中，都可以使用 ``_`` "
"作为标识符的分隔符，例如 ``testX_whenY_doesZ()``。"
msgstr ""

#: ../../google/typescript/syntax.rst:56
msgid "``_`` 前缀与后缀"
msgstr ""

#: ../../google/typescript/syntax.rst:58
msgid "标识符禁止使用下划线 ``_`` 作为前缀或后缀。这也意味着，禁止使用单个下划线 ``_`` 作为标识符（例如：用来表示未被使用的参数）。"
msgstr ""

#: ../../google/typescript/syntax.rst:60
msgid "如果需要从数组或元组中取出某个或某几个特定的元素的话，可以在解构语句中插入额外的逗号，忽略掉不需要的元素："
msgstr ""

#: ../../google/typescript/syntax.rst:69
msgid "导入模块"
msgstr ""

#: ../../google/typescript/syntax.rst:71
msgid "导入模块的命名空间时使用驼峰命名法（``lowerCamelCase``），文件名则使用蛇形命名法（``snake_case``）。例如："
msgstr ""

#: ../../google/typescript/syntax.rst:77
msgid "一些库可能会在导入命名空间时使用某种特定的前缀，这与这里规定的命名规范有所冲突。然而，由于其中的一些库已经被广泛使用，因此遵循它们的特殊规则反而能够获得更好的可读性。这些特例包括："
msgstr ""

#: ../../google/typescript/syntax.rst:79
msgid "`jQuery <https://jquery.com/>`_，使用 ``$`` 前缀。"
msgstr ""

#: ../../google/typescript/syntax.rst:81
msgid "`three.js <https://threejs.org/>`_，使用 ``THREE`` 前缀。"
msgstr ""

#: ../../google/typescript/syntax.rst:86
msgid "常量"
msgstr ""

#: ../../google/typescript/syntax.rst:88
msgid ""
"常量命名（``CONSTANT_CASE``）表示某个值不可被修改。它还可以用于虽然技术上可以实现，但是用户不应当试图修改的值，比如并未进行深度冻结（deep"
" frozen）的值。"
msgstr ""

#: ../../google/typescript/syntax.rst:100
msgid "这里所说的常量，也包括类中的静态只读属性："
msgstr ""

#: ../../google/typescript/syntax.rst:115
msgid "其他"
msgstr ""

#: ../../google/typescript/syntax.rst:117
msgid "如果某个值在程序的整个运行生命周期中会被多次实例化或被用户以任何方式进行修改，则它必须使用驼峰式命名法。"
msgstr ""

#: ../../google/typescript/syntax.rst:119
msgid "如果某个值是作为某个接口的实现的箭头函数，则它也可以使用驼峰式命名法。"
msgstr ""

#: ../../google/typescript/syntax.rst:124
msgid "别名"
msgstr ""

#: ../../google/typescript/syntax.rst:126
msgid ""
"在为一个已有的标识符创建具有局部作用域的别名时，别名的命名方式应当与现有的标识符和现有的命名规范保持一致。声明别名时，应使用 ``const`` "
"（如果它是一个变量）或 ``readonly`` （如果它是类里的一个字段）。"
msgstr ""

#: ../../google/typescript/syntax.rst:141
msgid "命名风格"
msgstr ""

#: ../../google/typescript/syntax.rst:143
msgid ""
"TypeScript 中的类型表达了丰富的信息，因此在起名时不应与类型中所携带的信息重复。（关于更多在起名时应避免的内容，可参见谷歌的 "
"`Testing Blog <https://testing.googleblog.com/2017/10/code-health-"
"identifiernamingpostforworl.html>`_。）"
msgstr ""

#: ../../google/typescript/syntax.rst:145
msgid "这里有几个具体的例子："
msgstr ""

#: ../../google/typescript/syntax.rst:147
msgid "不要为私有属性或方法名添加下划线 `_` 前缀或后缀。"
msgstr ""

#: ../../google/typescript/syntax.rst:149
msgid "不要为可选参数添加 `opt_` 前缀。"
msgstr ""

#: ../../google/typescript/syntax.rst:151
msgid "关于在存取器中的特例，参见后文 :ref:`name-and-order-of-includes` 。"
msgstr ""

#: ../../google/typescript/syntax.rst:153
msgid ""
"除非在项目中已成惯例，否则不要显式地标记接口类型（例如不要使用 ``IMyInterface`` 或者 ``MyFooInterface`` "
"）。在为类添加接口时，接口名称中应包含创建这一接口的原因。（例如，在为类 ``TodoItem`` 创建一个将其转为 JSON "
"格式以用于存储或者序列化的接口时，可以将这一接口命名为 ``TodoItemStorage`` 。）"
msgstr ""

#: ../../google/typescript/syntax.rst:155
msgid ""
"对于 ``Observable`` 类型的值，通常的惯例是使用 ``$`` "
"前缀将其与一般类型的值进行区分，使之不致混淆。各个团队可以在与项目内部的现有做法保持一致的前提下，自行决定是否采用这一做法。"
msgstr ""

#: ../../google/typescript/syntax.rst:160
msgid "描述性命名"
msgstr ""

#: ../../google/typescript/syntax.rst:162
msgid "命名应当具有描述性且易于读者理解。不要使用对项目以外的用户而言含糊不清或并不熟悉的缩写，不要通过删减单词中的字母来强行创造缩写。"
msgstr ""

#: ../../google/typescript/syntax.rst:164
msgid ""
"这一规则的例外是，对不超过十行的作用域中的变量，以及内部 API 的参数，可以使用短变量名（例如 ``i`` 、 ``j`` "
"等只有单个字母的变量名）。"
msgstr ""

#: ../../google/typescript/syntax.rst:169
msgid "文件编码"
msgstr ""

#: ../../google/typescript/syntax.rst:171
msgid "使用 UTF-8 文件编码。"
msgstr ""

#: ../../google/typescript/syntax.rst:173
msgid ""
"对于非 ASCII 字符，应使用实际的 Unicode 字符（例如 ``∞`` ）。对于非输出字符，使用对应的十六进制编码或 Unicode "
"转义编码（如 ``\\u221e`` ），并添加注释进行说明。"
msgstr ""

#: ../../google/typescript/syntax.rst:194
msgid "注释与文档"
msgstr ""

#: ../../google/typescript/syntax.rst:199
msgid "用 JSDoc 还是 注释？"
msgstr ""

#: ../../google/typescript/syntax.rst:201
msgid "TypesScript 中有两种类型的注释：JSDoc ``/** ... */`` 和普通注释 ``// ... 或者 /* ... */`` 。"
msgstr ""

#: ../../google/typescript/syntax.rst:203
msgid "对于文档，也就是用户应当阅读的注释，使用 ``/** JSDoc */`` 。"
msgstr ""

#: ../../google/typescript/syntax.rst:204
msgid "对于实现说明，也就是只和代码本身的实现细节有关的注释，使用 ``// 行注释`` 。"
msgstr ""

#: ../../google/typescript/syntax.rst:206
msgid "JSDoc 注释能够为工具（例如编辑器或文档生成器）所识别，而普通注释只能供人阅读。"
msgstr ""

#: ../../google/typescript/syntax.rst:211
msgid "JSDoc 规范"
msgstr ""

#: ../../google/typescript/syntax.rst:213
msgid ""
"JSDoc 的规范大部分遵循 JavaScript 风格指南中的规定。具体地说，遵循 JavaScript 风格指南中 :ref:`js-"
"comments` 一节的规则。本节的剩余部分只对与这些规则不一致的部分进行说明。"
msgstr ""

#: ../../google/typescript/syntax.rst:218
msgid "对所有导出的顶层模块进行注释"
msgstr ""

#: ../../google/typescript/syntax.rst:220
msgid ""
"使用 ``/** JSDoc */`` "
"注释为代码的用户提供信息。这些注释应当言之有物，切忌仅仅将属性名或参数名重抄一遍。如果代码的审核人认为某个属性或方法的作用不能从它的名字上一目了然地看出来的话，这些属性和方法同样应当使用"
" ``/** JSDoc */`` 注释添加说明文档，无论它们是否被导出，是公开还是私有的。"
msgstr ""

#: ../../google/typescript/syntax.rst:225
msgid "省略对于 TypeScript 而言多余的注释"
msgstr ""

#: ../../google/typescript/syntax.rst:227
msgid ""
"例如，不要在 ``@param`` 或 ``@return`` 注释中声明类型，不要在使用了 ``implements`` 、 ``enum`` "
"、 ``private`` 等关键字的地方添加 ``@implements`` 、 ``@enum`` 、 ``@private`` 等注释。"
msgstr ""

#: ../../google/typescript/syntax.rst:232
msgid "不要使用 ``@override``"
msgstr ""

#: ../../google/typescript/syntax.rst:234
msgid ""
"不要在 TypeScript 代码中使用 ``@override`` 注释。 ``@override`` "
"并不会被编译器视为强制性约束，这会导致注释与实现上的不一致性。如果纯粹为了文档添加这一注释，反而令人困惑。"
msgstr ""

#: ../../google/typescript/syntax.rst:239
msgid "注释必须言之有物"
msgstr ""

#: ../../google/typescript/syntax.rst:241
msgid "虽然大多数情况下文档对代码十分有益，但对于那些并不用于导出的符号，有时其函数或参数的名称与类型便足以描述自身了。"
msgstr ""

#: ../../google/typescript/syntax.rst:243
msgid "注释切忌照抄参数类型和参数名，如下面的反面示例："
msgstr ""

#: ../../google/typescript/syntax.rst:250
msgid "因此，只有当需要添加额外信息时才使用 ``@param`` 和 ``@return`` 注释，其它情况下直接省略即可。"
msgstr ""

#: ../../google/typescript/syntax.rst:265
msgid "参数属性注释"
msgstr ""

#: ../../google/typescript/syntax.rst:267
msgid "通过为构造函数的参数添加访问限定符，参数属性同时创建了构造函数参数和类成员。例如，如下的构造函数"
msgstr ""

#: ../../google/typescript/syntax.rst:275
msgid "为 ``Foo`` 类创建了 ``Bar`` 类型的成员 ``bar`` 。"
msgstr ""

#: ../../google/typescript/syntax.rst:277
msgid "如果要为这些成员添加文档，应使用 JSDoc 的 ``@param`` 注释，这样编辑器会在调用构造函数和访问属性时显示对应的文档描述信息。"
msgstr ""

#: ../../google/typescript/syntax.rst:308
msgid "函数调用注释"
msgstr ""

#: ../../google/typescript/syntax.rst:310
msgid ""
"如果有需要，可以在函数的调用点使用行内的 ``/* 块注释 */`` "
"为参数添加文档，或者使用字面量对象为参数添加名称并在函数声明中进行解构。注释的格式和位置没有明确的规定。"
msgstr ""

#: ../../google/typescript/syntax.rst:338
msgid "将文档置于装饰器之前"
msgstr ""

#: ../../google/typescript/syntax.rst:340
msgid "文档、方法或者属性如果同时具有装饰器（例如 ``@Component``）和 JSDoc 注释，应当将 JSDoc 置于装饰器之前。"
msgstr ""

#: ../../google/typescript/syntax.rst:342
msgid "禁止将 JSDoc 置于装饰器和被装饰的对象之间。"
msgstr ""

#: ../../google/typescript/syntax.rst:354
msgid "应当将 JSDoc 置于装饰器之前。"
msgstr ""

