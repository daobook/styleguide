# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Style Guide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Style Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-19 01:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../google/typescript/source_organization.rst:2
msgid "代码管理"
msgstr ""

#: ../../google/typescript/source_organization.rst:7
#: ../../google/typescript/source_organization.rst:211
msgid "模块"
msgstr ""

#: ../../google/typescript/source_organization.rst:12
msgid "导入路径"
msgstr ""

#: ../../google/typescript/source_organization.rst:14
msgid ""
"TypeScript 代码必须使用路径进行导入。这里的路径既可以是相对路径，以 ``.`` 或 ``..`` "
"开头，也可以是从项目根目录开始的绝对路径，如 ``root/path/to/file`` 。"
msgstr ""

#: ../../google/typescript/source_organization.rst:16
msgid "在引用逻辑上属于同一项目的文件时，应使用相对路径 ``./foo`` ，不要使用绝对路径 ``path/to/foo`` 。"
msgstr ""

#: ../../google/typescript/source_organization.rst:18
msgid "应尽可能地限制父层级的数量（避免出现诸如 ``../../../`` 的路径），过多的层级会导致模块和路径结构难以理解。"
msgstr ""

#: ../../google/typescript/source_organization.rst:29
msgid "用 命名空间 还是 模块？"
msgstr ""

#: ../../google/typescript/source_organization.rst:31
msgid "在 TypeScript 有两种组织代码的方式：命名空间（namespace）和模块（module）。"
msgstr ""

#: ../../google/typescript/source_organization.rst:33
msgid ""
"不允许使用命名空间，在 TypeScript 中必须使用模块（即 `ES6 模块 "
"<http://exploringjs.com/es6/ch_modules.html>`_ ）。也就是说，在引用其它文件中的代码时必须以 "
"``import {foo} from 'bar'`` 的形式进行导入和导出。"
msgstr ""

#: ../../google/typescript/source_organization.rst:35
msgid ""
"不允许使用 ``namespace Foo { ... }`` "
"的形式组织代码。命名空间只能在所用的外部第三方库有要求时才能使用。如果需要在语义上对代码划分命名空间，应当通过分成不同文件的方式实现。"
msgstr ""

#: ../../google/typescript/source_organization.rst:37
msgid ""
"不允许在导入时使用 ``require`` 关键字（形如 ``import x = require('...');`` ）。应当使用 ES6 "
"的模块语法。"
msgstr ""

#: ../../google/typescript/source_organization.rst:54
msgid ""
"TypeScript 的命名空间早期也被称为内部模块并使用 ``module`` 关键字，形如 ``module Foo { ... }`` "
"。不要使用这种用法。任何时候都应当使用 ES6 的导入语法。"
msgstr ""

#: ../../google/typescript/source_organization.rst:59
msgid "导出"
msgstr ""

#: ../../google/typescript/source_organization.rst:61
msgid "代码中必须使用具名的导出声明。"
msgstr ""

#: ../../google/typescript/source_organization.rst:68
msgid "不要使用默认导出，这样能保证所有的导入语句都遵循统一的范式："
msgstr ""

#: ../../google/typescript/source_organization.rst:75
msgid "为什么？因为默认导出并不为被导出的符号提供一个标准的名称，这增加了维护的难度和降低可读性的风险，同时并未带来明显的益处。如下面的例子所示："
msgstr ""

#: ../../google/typescript/source_organization.rst:83
msgid "具名导出的一个优势是，当代码中试图导入一个并未被导出的符号时，这段代码会报错。例如，假设在 ``foo.ts`` 中有如下的导出声明："
msgstr ""

#: ../../google/typescript/source_organization.rst:91
msgid "如果在 ``bar.ts`` 中有如下的导入语句："
msgstr ""

#: ../../google/typescript/source_organization.rst:98
msgid ""
"会导致编译错误： ``error TS2614: Module '\"./foo\"' has no exported member "
"'fizz'`` 。反之，如果在 ``bar.ts`` 中的导入语句为："
msgstr ""

#: ../../google/typescript/source_organization.rst:105
msgid "结果是 ``fizz === foo`` ，这往往不符合预期，且难以调试。"
msgstr ""

#: ../../google/typescript/source_organization.rst:107
msgid "此外，默认导出会鼓励程序员将所有内容全部置于一个巨大的对象当中，这个对象实际上充当了命名空间的角色："
msgstr ""

#: ../../google/typescript/source_organization.rst:118
msgid ""
"显然，这个文件中具有文件作用域，它可以被用做命名空间。但是，这里创建了第二个作用域——类 ``Foo`` "
"，这个类在其它文件中具有歧义：它既可以被视为类型，又可以被视为值。"
msgstr ""

#: ../../google/typescript/source_organization.rst:120
msgid "因此，应当使用文件作用域作为实质上的命名空间，同时使用具名的导出声明："
msgstr ""

#: ../../google/typescript/source_organization.rst:134
msgid "导出可见性"
msgstr ""

#: ../../google/typescript/source_organization.rst:136
msgid "TypeScript 不支持限制导出符号的可见性。因此，不要导出不用于模块以外的符号。一般来说，应当尽量减小模块的外部 API 的规模。"
msgstr ""

#: ../../google/typescript/source_organization.rst:141
msgid "可变导出"
msgstr ""

#: ../../google/typescript/source_organization.rst:143
msgid ""
"虽然技术上可以实现，但是可变导出会造成难以理解和调试的代码，尤其是对于在多个模块中经过了多次重新导出的符号。这条规则的一个例子是，不允许使用 "
"``export let`` 。"
msgstr ""

#: ../../google/typescript/source_organization.rst:155
msgid "如果确实需要允许外部代码对可变值进行访问，应当提供一个显式的取值器。"
msgstr ""

#: ../../google/typescript/source_organization.rst:167
msgid "有一种常见的编程情景是，要根据某种特定的条件从两个值中选取其中一个进行导出：先检查条件，然后导出。这种情况下，应当保证模块中的代码执行完毕后，导出的结果就是确定的。"
msgstr ""

#: ../../google/typescript/source_organization.rst:181
msgid "容器类"
msgstr ""

#: ../../google/typescript/source_organization.rst:183
msgid "不要为了实现命名空间创建含有静态方法或属性的容器类。"
msgstr ""

#: ../../google/typescript/source_organization.rst:193
msgid "应当将这些方法和属性设为单独导出的常数和函数。"
msgstr ""

#: ../../google/typescript/source_organization.rst:204
msgid "导入"
msgstr ""

#: ../../google/typescript/source_organization.rst:206
msgid "在 ES6 和 TypeScript 中，导入语句共有四种变体："
msgstr ""

#: ../../google/typescript/source_organization.rst:209
msgid "导入类型"
msgstr ""

#: ../../google/typescript/source_organization.rst:209
msgid "示例"
msgstr ""

#: ../../google/typescript/source_organization.rst:209
msgid "用途"
msgstr ""

#: ../../google/typescript/source_organization.rst:211
msgid "``import * as foo from '...';``"
msgstr ""

#: ../../google/typescript/source_organization.rst:211
#: ../../google/typescript/source_organization.rst:212
msgid "TypeScript 导入方式"
msgstr ""

#: ../../google/typescript/source_organization.rst:212
msgid "解构"
msgstr ""

#: ../../google/typescript/source_organization.rst:212
msgid "``import {SomeThing} from '...';``"
msgstr ""

#: ../../google/typescript/source_organization.rst:213
msgid "默认"
msgstr ""

#: ../../google/typescript/source_organization.rst:213
msgid "``import SomeThing from '...';``"
msgstr ""

#: ../../google/typescript/source_organization.rst:213
msgid "只用于外部代码的特殊需求"
msgstr ""

#: ../../google/typescript/source_organization.rst:214
msgid "副作用"
msgstr ""

#: ../../google/typescript/source_organization.rst:214
msgid "``import '...';``"
msgstr ""

#: ../../google/typescript/source_organization.rst:214
msgid "只用于加载某些库的副作用（例如自定义元素）"
msgstr ""

#: ../../google/typescript/source_organization.rst:233
msgid "选择模块导入还是解构导入？"
msgstr ""

#: ../../google/typescript/source_organization.rst:235
msgid "根据使用场景的不同，模块导入和解构导入分别有其各自的优势。"
msgstr ""

#: ../../google/typescript/source_organization.rst:237
msgid ""
"虽然模块导入语句中出现了通配符 ``*`` "
"，但模块导入并不能因此被视为其它语言中的通配符导入。相反地，模块导入语句为整个模块提供了一个名称，模块中的所有符号都通过这个名称进行访问，这为代码提供了更好的可读性，同时令模块中的所有符号可以进行自动补全。模块导入减少了导入语句的数量（模块中的所有符号都可以使用），降低了命名冲突的出现几率，同时还允许为被导入的模块提供一个简洁的名称。在从一个大型"
" API 中导入多个不同的符号时，模块导入语句尤其有用。"
msgstr ""

#: ../../google/typescript/source_organization.rst:239
msgid ""
"解构导入语句则为每一个被导入的符号提供一个局部的名称，这样在使用被导入的符号时，代码可以更简洁。对那些十分常用的符号，例如 Jasmine 的 "
"``describe`` 和 ``it`` 来说，这一点尤其有用。"
msgstr ""

#: ../../google/typescript/source_organization.rst:284
msgid "重命名导入"
msgstr ""

#: ../../google/typescript/source_organization.rst:286
msgid ""
"在代码中，应当通过使用模块导入或重命名导出解决命名冲突。此外，在需要时，也可以使用重命名导入（例如 ``import {SomeThing as "
"SomeOtherThing}`` ）。"
msgstr ""

#: ../../google/typescript/source_organization.rst:288
msgid "在以下几种情况下，重命名导入可能较为有用："
msgstr ""

#: ../../google/typescript/source_organization.rst:290
msgid "避免与其它导入的符号产生命名冲突。"
msgstr ""

#: ../../google/typescript/source_organization.rst:291
msgid "被导入符号的名称是自动生成的。"
msgstr ""

#: ../../google/typescript/source_organization.rst:292
msgid ""
"被导入符号的名称不能清晰地描述其自身，需要通过重命名提高代码的可读性，如将 RxJS 的 ``from`` 函数重命名为 "
"``observableFrom`` 。"
msgstr ""

#: ../../google/typescript/source_organization.rst:297
msgid "``import type`` 和 ``export type``"
msgstr ""

#: ../../google/typescript/source_organization.rst:299
msgid "不要使用 ``import type ... from`` 或者 ``export type ... from`` 。"
msgstr ""

#: ../../google/typescript/source_organization.rst:303
msgid "这一规则不适用于导出类型定义，如 ``export type Foo = ...;`` 。"
msgstr ""

#: ../../google/typescript/source_organization.rst:311
msgid "应当使用常规的导入语句。"
msgstr ""

#: ../../google/typescript/source_organization.rst:319
msgid ""
"TypeScript "
"的工具链会自动区分用作类型的符号和用作值的符号。对于类型引用，工具链不会生成运行时加载的代码。这样做的原因是为了提供更好的开发体验，否则在 "
"``import type`` 和 ``import`` 之间反复切换会非常繁琐。同时， ``import type`` "
"并不提供任何保证，因为代码仍然可以通过其它的途径导入同一个依赖。"
msgstr ""

#: ../../google/typescript/source_organization.rst:321
msgid ""
"如果需要在运行时加载代码以执行其副作用，应使用 ``import '...'`` ，参见 :ref:`ts-imports-source-"
"organization` 一节。"
msgstr ""

#: ../../google/typescript/source_organization.rst:323
msgid ""
"使用 ``export type`` 似乎可以避免将某个用作值的符号导出为 API。然而，和 ``import type`` 类似， "
"``export type`` 也不提供任何保证，因为外部代码仍然可以通过其它途径导入。如果需要拆分对 API "
"作为值的使用和作为类型的使用，并保证二者不被混用的话，应当显式地将其拆分成不同的符号，例如 ``UserService`` 和 "
"``AjaxUserService`` ，这样不容易造成错误，同时能更好地表达设计思路。"
msgstr ""

#: ../../google/typescript/source_organization.rst:328
msgid "根据特征组织代码"
msgstr ""

#: ../../google/typescript/source_organization.rst:330
msgid ""
"应当根据特征而非类型组织代码。例如，一个在线商城的代码应当按照 ``products`` ， ``checkout`` ， ``backend``"
" 等分类，而不是 ``views`` ， ``models`` ， ``controllers`` 。"
msgstr ""

