# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Style Guide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Style Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-19 01:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../google/shell/naming_conventions.rst:2
msgid "命名约定"
msgstr ""

#: ../../google/shell/naming_conventions.rst:5
msgid "函数名"
msgstr ""

#: ../../google/shell/naming_conventions.rst:8
msgid ""
"使用小写字母，并用下划线分隔单词。使用双冒号 ``::`` 分隔库。函数名之后必须有圆括号。关键词 ``function`` "
"是可选的，但必须在一个项目中保持一致。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:10
msgid ""
"如果你正在写单个函数，请用小写字母来命名，并用下划线分隔单词。如果你正在写一个包，使用双冒号 ``::`` "
"来分隔包名。大括号必须和函数名位于同一行（就像在Google的其他语言一样），并且函数名和圆括号之间没有空格。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:24
msgid "当函数名后存在 ``()`` 时，关键词 ``function`` 是多余的。但是其促进了函数的快速辨识。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:27
msgid "变量名"
msgstr ""

#: ../../google/shell/naming_conventions.rst:30
msgid "如函数名。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:32
msgid "循环的变量名应该和循环的任何变量同样命名。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:41
msgid "常量和环境变量名"
msgstr ""

#: ../../google/shell/naming_conventions.rst:44
msgid "全部大写，用下划线分隔，声明在文件的顶部。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:46
msgid "常量和任何导出到环境中的都应该大写。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:56
msgid ""
"第一次设置时有一些就变成了常量（例如，通过getopts）。因此，可以在getopts中或基于条件来设定常量，但之后应该立即设置其为只读。值得注意的是，在函数中"
" ``declare`` 不会对全局变量进行操作。所以推荐使用 ``readonly`` 和 ``export`` 来代替。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:69
msgid "源文件名"
msgstr ""

#: ../../google/shell/naming_conventions.rst:72
msgid "小写，如果需要的话使用下划线分隔单词。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:74
msgid ""
"这是为了和在Google中的其他代码风格保持一致： ``maketemplate`` 或者 ``make_template`` ，而不是 "
"``make-template`` 。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:77
msgid "只读变量"
msgstr ""

#: ../../google/shell/naming_conventions.rst:80
msgid "使用 ``readonly`` 或者 ``declare -r`` 来确保变量只读。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:82
msgid "因为全局变量在shell中广泛使用，所以在使用它们的过程中捕获错误是很重要的。当你声明了一个变量，希望其只读，那么请明确指出。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:94
msgid "使用本地变量"
msgstr ""

#: ../../google/shell/naming_conventions.rst:97
msgid "使用 ``local`` 声明特定功能的变量。声明和赋值应该在不同行。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:99
msgid "使用 ``local`` 来声明局部变量以确保其只在函数内部和子函数中可见。这避免了污染全局命名空间和不经意间设置可能具有函数之外重要性的变量。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:101
msgid "当赋值的值由命令替换提供时，声明和赋值必须分开。因为内建的 ``local`` 不会从命令替换中传递退出码。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:120
msgid "函数位置"
msgstr ""

#: ../../google/shell/naming_conventions.rst:123
msgid "将文件中所有的函数一起放在常量下面。不要在函数之间隐藏可执行代码。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:125
msgid ""
"如果你有函数，请将他们一起放在文件头部。只有includes， ``set`` "
"声明和常量设置可能在函数声明之前完成。不要在函数之间隐藏可执行代码。如果那样做，会使得代码在调试时难以跟踪并出现意想不到的讨厌结果。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:128
msgid "主函数main"
msgstr ""

#: ../../google/shell/naming_conventions.rst:131
msgid "对于包含至少一个其他函数的足够长的脚本，需要称为 ``main`` 的函数。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:133
msgid ""
"为了方便查找程序的开始，将主程序放入一个称为 ``main`` "
"的函数，作为最下面的函数。这使其和代码库的其余部分保持一致性，同时允许你定义更多变量为局部变量（如果主代码不是一个函数就不能这么做）。文件中最后的非注释行应该是对"
" ``main`` 函数的调用。"
msgstr ""

#: ../../google/shell/naming_conventions.rst:139
msgid "显然，对于仅仅是线性流的短脚本， ``main`` 是矫枉过正，因此是不需要的。"
msgstr ""

