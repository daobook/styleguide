# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Style Guide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Style Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-19 01:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../google/shell/calling_commands.rst:2
msgid "调用命令"
msgstr ""

#: ../../google/shell/calling_commands.rst:5
msgid "检查返回值"
msgstr ""

#: ../../google/shell/calling_commands.rst:8
msgid "总是检查返回值，并给出信息返回值。"
msgstr ""

#: ../../google/shell/calling_commands.rst:10
msgid "对于非管道命令，使用 ``$?`` 或直接通过一个 ``if`` 语句来检查以保持其简洁。"
msgstr ""

#: ../../google/shell/calling_commands.rst:12
#: ../../google/shell/calling_commands.rst:58
msgid "例如："
msgstr ""

#: ../../google/shell/calling_commands.rst:28
msgid "Bash也有 ``PIPESTATUS`` 变量，允许检查从管道所有部分返回的代码。如果仅仅需要检查整个管道是成功还是失败，以下的方法是可以接受的："
msgstr ""

#: ../../google/shell/calling_commands.rst:37
msgid ""
"可是，只要你运行任何其他命令， ``PIPESTATUS`` "
"将会被覆盖。如果你需要基于管道中发生的错误执行不同的操作，那么你需要在运行命令后立即将 ``PIPESTATUS`` 赋值给另一个变量（别忘了 "
"``[`` 是一个会将 ``PIPESTATUS`` 擦除的命令）。"
msgstr ""

#: ../../google/shell/calling_commands.rst:51
msgid "内建命令和外部命令"
msgstr ""

#: ../../google/shell/calling_commands.rst:54
msgid "可以在调用shell内建命令和调用另外的程序之间选择，请选择内建命令。"
msgstr ""

#: ../../google/shell/calling_commands.rst:56
msgid "我们更喜欢使用内建命令，如在 ``bash(1)`` 中参数扩展函数。因为它更强健和便携（尤其是跟像 ``sed`` 这样的命令比较）"
msgstr ""

