# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Style Guide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Style Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-19 01:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../google/python/pyguide.md:7
msgid "Google Python Style Guide"
msgstr ""

#: ../../google/python/pyguide.md:14
msgid "[1 Background](#s1-background)"
msgstr ""

#: ../../google/python/pyguide.md:15
msgid "[2 Python Language Rules](#s2-python-language-rules)"
msgstr ""

#: ../../google/python/pyguide.md:16
msgid "[2.1 Lint](#s2.1-lint)"
msgstr ""

#: ../../google/python/pyguide.md:17
msgid "[2.2 Imports](#s2.2-imports)"
msgstr ""

#: ../../google/python/pyguide.md:18
msgid "[2.3 Packages](#s2.3-packages)"
msgstr ""

#: ../../google/python/pyguide.md:19
msgid "[2.4 Exceptions](#s2.4-exceptions)"
msgstr ""

#: ../../google/python/pyguide.md:20
msgid "[2.5 Global variables](#s2.5-global-variables)"
msgstr ""

#: ../../google/python/pyguide.md:21
msgid "[2.6 Nested/Local/Inner Classes and Functions](#s2.6-nested)"
msgstr ""

#: ../../google/python/pyguide.md:22
msgid "[2.7 Comprehensions & Generator Expressions](#s2.7-comprehensions)"
msgstr ""

#: ../../google/python/pyguide.md:23
msgid ""
"[2.8 Default Iterators and Operators](#s2.8-default-iterators-and-"
"operators)"
msgstr ""

#: ../../google/python/pyguide.md:24
msgid "[2.9 Generators](#s2.9-generators)"
msgstr ""

#: ../../google/python/pyguide.md:25
msgid "[2.10 Lambda Functions](#s2.10-lambda-functions)"
msgstr ""

#: ../../google/python/pyguide.md:26
msgid "[2.11 Conditional Expressions](#s2.11-conditional-expressions)"
msgstr ""

#: ../../google/python/pyguide.md:27
msgid "[2.12 Default Argument Values](#s2.12-default-argument-values)"
msgstr ""

#: ../../google/python/pyguide.md:28
msgid "[2.13 Properties](#s2.13-properties)"
msgstr ""

#: ../../google/python/pyguide.md:29
msgid "[2.14 True/False Evaluations](#s2.14-truefalse-evaluations)"
msgstr ""

#: ../../google/python/pyguide.md:30
msgid "[2.16 Lexical Scoping](#s2.16-lexical-scoping)"
msgstr ""

#: ../../google/python/pyguide.md:31
msgid ""
"[2.17 Function and Method Decorators](#s2.17-function-and-method-"
"decorators)"
msgstr ""

#: ../../google/python/pyguide.md:32
msgid "[2.18 Threading](#s2.18-threading)"
msgstr ""

#: ../../google/python/pyguide.md:33
msgid "[2.19 Power Features](#s2.19-power-features)"
msgstr ""

#: ../../google/python/pyguide.md:34
msgid ""
"[2.20 Modern Python: from \\_\\_future\\_\\_ imports](#s2.20-modern-"
"python)"
msgstr ""

#: ../../google/python/pyguide.md:35
msgid "[2.21 Type Annotated Code](#s2.21-type-annotated-code)"
msgstr ""

#: ../../google/python/pyguide.md:36
msgid "[3 Python Style Rules](#s3-python-style-rules)"
msgstr ""

#: ../../google/python/pyguide.md:37
msgid "[3.1 Semicolons](#s3.1-semicolons)"
msgstr ""

#: ../../google/python/pyguide.md:38
msgid "[3.2 Line length](#s3.2-line-length)"
msgstr ""

#: ../../google/python/pyguide.md:39
msgid "[3.3 Parentheses](#s3.3-parentheses)"
msgstr ""

#: ../../google/python/pyguide.md:40
msgid "[3.4 Indentation](#s3.4-indentation)"
msgstr ""

#: ../../google/python/pyguide.md:41
msgid "[3.4.1 Trailing commas in sequences of items?](#s3.4.1-trailing-commas)"
msgstr ""

#: ../../google/python/pyguide.md:42
msgid "[3.5 Blank Lines](#s3.5-blank-lines)"
msgstr ""

#: ../../google/python/pyguide.md:43
msgid "[3.6 Whitespace](#s3.6-whitespace)"
msgstr ""

#: ../../google/python/pyguide.md:44
msgid "[3.7 Shebang Line](#s3.7-shebang-line)"
msgstr ""

#: ../../google/python/pyguide.md:45
msgid "[3.8 Comments and Docstrings](#s3.8-comments-and-docstrings)"
msgstr ""

#: ../../google/python/pyguide.md:46
msgid "[3.8.1 Docstrings](#s3.8.1-comments-in-doc-strings)"
msgstr ""

#: ../../google/python/pyguide.md:47
msgid "[3.8.2 Modules](#s3.8.2-comments-in-modules)"
msgstr ""

#: ../../google/python/pyguide.md:48
msgid "[3.8.3 Functions and Methods](#s3.8.3-functions-and-methods)"
msgstr ""

#: ../../google/python/pyguide.md:49
msgid "[3.8.4 Classes](#s3.8.4-comments-in-classes)"
msgstr ""

#: ../../google/python/pyguide.md:50
msgid "[3.8.5 Block and Inline Comments](#s3.8.5-block-and-inline-comments)"
msgstr ""

#: ../../google/python/pyguide.md:51
msgid ""
"[3.8.6 Punctuation, Spelling, and Grammar](#s3.8.6-punctuation-spelling-"
"and-grammar)"
msgstr ""

#: ../../google/python/pyguide.md:52
msgid "[3.10 Strings](#s3.10-strings)"
msgstr ""

#: ../../google/python/pyguide.md:53
msgid "[3.10.1 Logging](#s3.10.1-logging)"
msgstr ""

#: ../../google/python/pyguide.md:54
msgid "[3.10.2 Error Messages](#s3.10.2-error-messages)"
msgstr ""

#: ../../google/python/pyguide.md:55
msgid ""
"[3.11 Files, Sockets, and similar Stateful Resources](#s3.11-files-"
"sockets-closeables)"
msgstr ""

#: ../../google/python/pyguide.md:56
msgid "[3.12 TODO Comments](#s3.12-todo-comments)"
msgstr ""

#: ../../google/python/pyguide.md:57
msgid "[3.13 Imports formatting](#s3.13-imports-formatting)"
msgstr ""

#: ../../google/python/pyguide.md:58
msgid "[3.14 Statements](#s3.14-statements)"
msgstr ""

#: ../../google/python/pyguide.md:59
msgid "[3.15 Accessors](#s3.15-accessors)"
msgstr ""

#: ../../google/python/pyguide.md:60
msgid "[3.16 Naming](#s3.16-naming)"
msgstr ""

#: ../../google/python/pyguide.md:61
msgid "[3.16.1 Names to Avoid](#s3.16.1-names-to-avoid)"
msgstr ""

#: ../../google/python/pyguide.md:62
msgid "[3.16.2 Naming Conventions](#s3.16.2-naming-conventions)"
msgstr ""

#: ../../google/python/pyguide.md:63
msgid "[3.16.3 File Naming](#s3.16.3-file-naming)"
msgstr ""

#: ../../google/python/pyguide.md:64
msgid ""
"[3.16.4 Guidelines derived from Guido's Recommendations](#s3.16.4"
"-guidelines-derived-from-guidos-recommendations)"
msgstr ""

#: ../../google/python/pyguide.md:65
msgid "[3.17 Main](#s3.17-main)"
msgstr ""

#: ../../google/python/pyguide.md:66
msgid "[3.18 Function length](#s3.18-function-length)"
msgstr ""

#: ../../google/python/pyguide.md:67
msgid "[3.19 Type Annotations](#s3.19-type-annotations)"
msgstr ""

#: ../../google/python/pyguide.md:68
msgid "[3.19.1 General Rules](#s3.19.1-general-rules)"
msgstr ""

#: ../../google/python/pyguide.md:69
msgid "[3.19.2 Line Breaking](#s3.19.2-line-breaking)"
msgstr ""

#: ../../google/python/pyguide.md:70
msgid "[3.19.3 Forward Declarations](#s3.19.3-forward-declarations)"
msgstr ""

#: ../../google/python/pyguide.md:71
msgid "[3.19.4 Default Values](#s3.19.4-default-values)"
msgstr ""

#: ../../google/python/pyguide.md:72
msgid "[3.19.5 NoneType](#s3.19.5-nonetype)"
msgstr ""

#: ../../google/python/pyguide.md:73
msgid "[3.19.6 Type Aliases](#s3.19.6-type-aliases)"
msgstr ""

#: ../../google/python/pyguide.md:74
msgid "[3.19.7 Ignoring Types](#s3.19.7-ignoring-types)"
msgstr ""

#: ../../google/python/pyguide.md:75
msgid "[3.19.8 Typing Variables](#s3.19.8-typing-variables)"
msgstr ""

#: ../../google/python/pyguide.md:76
msgid "[3.19.9 Tuples vs Lists](#s3.19.9-tuples-vs-lists)"
msgstr ""

#: ../../google/python/pyguide.md:77
msgid "[3.19.10 TypeVars](#s3.19.10-typevars)"
msgstr ""

#: ../../google/python/pyguide.md:78
msgid "[3.19.11 String types](#s3.19.11-string-types)"
msgstr ""

#: ../../google/python/pyguide.md:79
msgid "[3.19.12 Imports For Typing](#s3.19.12-imports-for-typing)"
msgstr ""

#: ../../google/python/pyguide.md:80
msgid "[3.19.13 Conditional Imports](#s3.19.13-conditional-imports)"
msgstr ""

#: ../../google/python/pyguide.md:81
msgid "[3.19.14 Circular Dependencies](#s3.19.14-circular-dependencies)"
msgstr ""

#: ../../google/python/pyguide.md:82
msgid "[3.19.15 Generics](#s3.19.15-generics)"
msgstr ""

#: ../../google/python/pyguide.md:83
msgid "[3.19.16 Build Dependencies](#s3.19.16-build-dependencies)"
msgstr ""

#: ../../google/python/pyguide.md:84
msgid "[4 Parting Words](#4-parting-words)"
msgstr ""

#: ../../google/python/pyguide.md:88
msgid "<a id=\"s1-background\"></a> <a id=\"1-background\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:91
msgid "<a id=\"background\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:92
msgid "1 Background"
msgstr ""

#: ../../google/python/pyguide.md:94
msgid ""
"Python is the main dynamic language used at Google. This style guide is a"
" list of *dos and don'ts* for Python programs."
msgstr ""

#: ../../google/python/pyguide.md:97
msgid ""
"To help you format code correctly, we've created a [settings file for "
"Vim](google_python_style.vim). For Emacs, the default settings should be "
"fine."
msgstr ""

#: ../../google/python/pyguide.md:99
msgid ""
"Many teams use the [yapf](https://github.com/google/yapf/) auto-formatter"
" to avoid arguing over formatting."
msgstr ""

#: ../../google/python/pyguide.md:103
msgid ""
"<a id=\"s2-python-language-rules\"></a> <a id=\"2-python-language-"
"rules\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:106
msgid "<a id=\"python-language-rules\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:107
msgid "2 Python Language Rules"
msgstr ""

#: ../../google/python/pyguide.md:109
msgid "<a id=\"s2.1-lint\"></a> <a id=\"21-lint\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:112
msgid "<a id=\"lint\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:113
msgid "2.1 Lint"
msgstr ""

#: ../../google/python/pyguide.md:115
msgid ""
"Run `pylint` over your code using this "
"[pylintrc](https://google.github.io/styleguide/pylintrc)."
msgstr ""

#: ../../google/python/pyguide.md:117
msgid "<a id=\"s2.1.1-definition\"></a> <a id=\"211-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:120
msgid "<a id=\"lint-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:121
msgid "2.1.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:123
msgid ""
"`pylint` is a tool for finding bugs and style problems in Python source "
"code. It finds problems that are typically caught by a compiler for less "
"dynamic languages like C and C++. Because of the dynamic nature of "
"Python, some warnings may be incorrect; however, spurious warnings should"
" be fairly infrequent."
msgstr ""

#: ../../google/python/pyguide.md:130
msgid "<a id=\"s2.1.2-pros\"></a> <a id=\"212-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:133
msgid "<a id=\"lint-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:134
msgid "2.1.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:136
msgid "Catches easy-to-miss errors like typos, using-vars-before-assignment, etc."
msgstr ""

#: ../../google/python/pyguide.md:138
msgid "<a id=\"s2.1.3-cons\"></a> <a id=\"213-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:141
msgid "<a id=\"lint-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:142
msgid "2.1.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:144
msgid ""
"`pylint` isn't perfect. To take advantage of it, sometimes we'll need to "
"write around it, suppress its warnings or fix it."
msgstr ""

#: ../../google/python/pyguide.md:148
msgid "<a id=\"s2.1.4-decision\"></a> <a id=\"214-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:151
msgid "<a id=\"lint-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:152
msgid "2.1.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:154
msgid "Make sure you run `pylint` on your code."
msgstr ""

#: ../../google/python/pyguide.md:159
msgid ""
"Suppress warnings if they are inappropriate so that other issues are not "
"hidden. To suppress warnings, you can set a line-level comment:"
msgstr ""

#: ../../google/python/pyguide.md:166
msgid ""
"`pylint` warnings are each identified by symbolic name (`empty-"
"docstring`) Google-specific warnings start with `g-`."
msgstr ""

#: ../../google/python/pyguide.md:170
msgid ""
"If the reason for the suppression is not clear from the symbolic name, "
"add an explanation."
msgstr ""

#: ../../google/python/pyguide.md:173
msgid ""
"Suppressing in this way has the advantage that we can easily search for "
"suppressions and revisit them."
msgstr ""

#: ../../google/python/pyguide.md:176
msgid "You can get a list of `pylint` warnings by doing:"
msgstr ""

#: ../../google/python/pyguide.md:184
msgid "To get more information on a particular message, use:"
msgstr ""

#: ../../google/python/pyguide.md:190
msgid ""
"Prefer `pylint: disable` to the deprecated older form `pylint: disable-"
"msg`."
msgstr ""

#: ../../google/python/pyguide.md:192
msgid ""
"Unused argument warnings can be suppressed by deleting the variables at "
"the beginning of the function. Always include a comment explaining why "
"you are deleting it. \"Unused.\" is sufficient. For example:"
msgstr ""

#: ../../google/python/pyguide.md:202
msgid ""
"Other common forms of suppressing this warning include using '`_`' as the"
" identifier for the unused argument or prefixing the argument name with "
"'`unused_`', or assigning them to '`_`'. These forms are allowed but no "
"longer encouraged. These break callers that pass arguments by name and do"
" not enforce that the arguments are actually unused."
msgstr ""

#: ../../google/python/pyguide.md:208
msgid "<a id=\"s2.2-imports\"></a> <a id=\"22-imports\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:211
msgid "<a id=\"imports\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:212
msgid "2.2 Imports"
msgstr ""

#: ../../google/python/pyguide.md:214
msgid ""
"Use `import` statements for packages and modules only, not for individual"
" classes or functions. Imports from the [typing module](#typing-imports),"
" [typing_extensions "
"module](https://github.com/python/typing/tree/master/typing_extensions), "
"and the [six.moves module](https://six.readthedocs.io/#module-six.moves) "
"are exempt from this rule."
msgstr ""

#: ../../google/python/pyguide.md:221
msgid "<a id=\"s2.2.1-definition\"></a> <a id=\"221-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:224
msgid "<a id=\"imports-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:225
msgid "2.2.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:227
msgid "Reusability mechanism for sharing code from one module to another."
msgstr ""

#: ../../google/python/pyguide.md:229
msgid "<a id=\"s2.2.2-pros\"></a> <a id=\"222-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:232
msgid "<a id=\"imports-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:233
msgid "2.2.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:235
msgid ""
"The namespace management convention is simple. The source of each "
"identifier is indicated in a consistent way; `x.Obj` says that object "
"`Obj` is defined in module `x`."
msgstr ""

#: ../../google/python/pyguide.md:239
msgid "<a id=\"s2.2.3-cons\"></a> <a id=\"223-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:242
msgid "<a id=\"imports-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:243
msgid "2.2.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:245
msgid "Module names can still collide. Some module names are inconveniently long."
msgstr ""

#: ../../google/python/pyguide.md:247
msgid "<a id=\"s2.2.4-decision\"></a> <a id=\"224-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:250
msgid "<a id=\"imports-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:251
msgid "2.2.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:253
msgid "Use `import x` for importing packages and modules."
msgstr ""

#: ../../google/python/pyguide.md:254
msgid ""
"Use `from x import y` where `x` is the package prefix and `y` is the "
"module name with no prefix."
msgstr ""

#: ../../google/python/pyguide.md:256
msgid ""
"Use `from x import y as z` if two modules named `y` are to be imported or"
" if `y` is an inconveniently long name."
msgstr ""

#: ../../google/python/pyguide.md:258
msgid ""
"Use `import y as z` only when `z` is a standard abbreviation (e.g., `np` "
"for `numpy`)."
msgstr ""

#: ../../google/python/pyguide.md:261
msgid "For example the module `sound.effects.echo` may be imported as follows:"
msgstr ""

#: ../../google/python/pyguide.md:269
msgid ""
"Do not use relative names in imports. Even if the module is in the same "
"package, use the full package name. This helps prevent unintentionally "
"importing a package twice."
msgstr ""

#: ../../google/python/pyguide.md:273
msgid "<a id=\"s2.3-packages\"></a> <a id=\"23-packages\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:276
msgid "<a id=\"packages\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:277
msgid "2.3 Packages"
msgstr ""

#: ../../google/python/pyguide.md:279
msgid "Import each module using the full pathname location of the module."
msgstr ""

#: ../../google/python/pyguide.md:281
msgid "<a id=\"s2.3.1-pros\"></a> <a id=\"231-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:284
msgid "<a id=\"packages-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:285
msgid "2.3.1 Pros"
msgstr ""

#: ../../google/python/pyguide.md:287
msgid ""
"Avoids conflicts in module names or incorrect imports due to the module "
"search path not being what the author expected. Makes it easier to find "
"modules."
msgstr ""

#: ../../google/python/pyguide.md:290
msgid "<a id=\"s2.3.2-cons\"></a> <a id=\"232-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:293
msgid "<a id=\"packages-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:294
msgid "2.3.2 Cons"
msgstr ""

#: ../../google/python/pyguide.md:296
msgid ""
"Makes it harder to deploy code because you have to replicate the package "
"hierarchy. Not really a problem with modern deployment mechanisms."
msgstr ""

#: ../../google/python/pyguide.md:299
msgid "<a id=\"s2.3.3-decision\"></a> <a id=\"233-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:302
msgid "<a id=\"packages-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:303
msgid "2.3.3 Decision"
msgstr ""

#: ../../google/python/pyguide.md:305
msgid "All new code should import each module by its full package name."
msgstr ""

#: ../../google/python/pyguide.md:307
msgid "Imports should be as follows:"
msgstr ""

#: ../../google/python/pyguide.md:327
msgid "_(assume this file lives in `doctor/who/` where `jodie.py` also exists)_"
msgstr ""

#: ../../google/python/pyguide.md:337
msgid ""
"The directory the main binary is located in should not be assumed to be "
"in `sys.path` despite that happening in some environments. This being the"
" case, code should assume that `import jodie` refers to a third party or "
"top level package named `jodie`, not a local `jodie.py`."
msgstr ""

#: ../../google/python/pyguide.md:343
msgid "<a id=\"s2.4-exceptions\"></a> <a id=\"24-exceptions\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:346
msgid "<a id=\"exceptions\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:347
msgid "2.4 Exceptions"
msgstr ""

#: ../../google/python/pyguide.md:349
msgid "Exceptions are allowed but must be used carefully."
msgstr ""

#: ../../google/python/pyguide.md:351
msgid "<a id=\"s2.4.1-definition\"></a> <a id=\"241-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:354
msgid "<a id=\"exceptions-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:355
msgid "2.4.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:357
msgid ""
"Exceptions are a means of breaking out of normal control flow to handle "
"errors or other exceptional conditions."
msgstr ""

#: ../../google/python/pyguide.md:360
msgid "<a id=\"s2.4.2-pros\"></a> <a id=\"242-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:363
msgid "<a id=\"exceptions-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:364
msgid "2.4.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:366
msgid ""
"The control flow of normal operation code is not cluttered by error-"
"handling code. It also allows the control flow to skip multiple frames "
"when a certain condition occurs, e.g., returning from N nested functions "
"in one step instead of having to plumb error codes through."
msgstr ""

#: ../../google/python/pyguide.md:371
msgid "<a id=\"s2.4.3-cons\"></a> <a id=\"243-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:374
msgid "<a id=\"exceptions-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:375
msgid "2.4.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:377
msgid ""
"May cause the control flow to be confusing. Easy to miss error cases when"
" making library calls."
msgstr ""

#: ../../google/python/pyguide.md:380
msgid "<a id=\"s2.4.4-decision\"></a> <a id=\"244-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:383
msgid "<a id=\"exceptions-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:384
msgid "2.4.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:386
msgid "Exceptions must follow certain conditions:"
msgstr ""

#: ../../google/python/pyguide.md:388
msgid ""
"Make use of built-in exception classes when it makes sense. For example, "
"raise a `ValueError` to indicate a programming mistake like a violated "
"precondition (such as if you were passed a negative number but required a"
" positive one). Do not use `assert` statements for validating argument "
"values of a public API. `assert` is used to ensure internal correctness, "
"not to enforce correct usage nor to indicate that some unexpected event "
"occurred. If an exception is desired in the latter cases, use a raise "
"statement. For example:"
msgstr ""

#: ../../google/python/pyguide.md:443
msgid ""
"Libraries or packages may define their own exceptions. When doing so they"
" must inherit from an existing exception class. Exception names should "
"end in `Error` and should not introduce repetition (`foo.FooError`)."
msgstr ""

#: ../../google/python/pyguide.md:447
msgid ""
"Never use catch-all `except:` statements, or catch `Exception` or "
"`StandardError`, unless you are"
msgstr ""

#: ../../google/python/pyguide.md:450
msgid "re-raising the exception, or"
msgstr ""

#: ../../google/python/pyguide.md:451
msgid ""
"creating an isolation point in the program where exceptions are not "
"propagated but are recorded and suppressed instead, such as protecting a "
"thread from crashing by guarding its outermost block."
msgstr ""

#: ../../google/python/pyguide.md:455
msgid ""
"Python is very tolerant in this regard and `except:` will really catch "
"everything including misspelled names, sys.exit() calls, Ctrl+C "
"interrupts, unittest failures and all kinds of other exceptions that you "
"simply don't want to catch."
msgstr ""

#: ../../google/python/pyguide.md:460
msgid ""
"Minimize the amount of code in a `try`/`except` block. The larger the "
"body of the `try`, the more likely that an exception will be raised by a "
"line of code that you didn't expect to raise an exception. In those "
"cases, the `try`/`except` block hides a real error."
msgstr ""

#: ../../google/python/pyguide.md:465
msgid ""
"Use the `finally` clause to execute code whether or not an exception is "
"raised in the `try` block. This is often useful for cleanup, i.e., "
"closing a file."
msgstr ""

#: ../../google/python/pyguide.md:469
msgid "<a id=\"s2.5-global-variables\"></a> <a id=\"25-global-variables\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:472
msgid "<a id=\"global-variables\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:473
msgid "2.5 Global variables"
msgstr ""

#: ../../google/python/pyguide.md:475 ../../google/python/pyguide.md:508
msgid "Avoid global variables."
msgstr ""

#: ../../google/python/pyguide.md:477
msgid "<a id=\"s2.5.1-definition\"></a> <a id=\"251-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:480
msgid "<a id=\"global-variables-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:481
msgid "2.5.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:483
msgid "Variables that are declared at the module level or as class attributes."
msgstr ""

#: ../../google/python/pyguide.md:485
msgid "<a id=\"s2.5.2-pros\"></a> <a id=\"252-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:488
msgid "<a id=\"global-variables-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:489
msgid "2.5.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:491
msgid "Occasionally useful."
msgstr ""

#: ../../google/python/pyguide.md:493
msgid "<a id=\"s2.5.3-cons\"></a> <a id=\"253-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:496
msgid "<a id=\"global-variables-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:497
msgid "2.5.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:499
msgid ""
"Has the potential to change module behavior during the import, because "
"assignments to global variables are done when the module is first "
"imported."
msgstr ""

#: ../../google/python/pyguide.md:502
msgid "<a id=\"s2.5.4-decision\"></a> <a id=\"254-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:505
msgid "<a id=\"global-variables-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:506
msgid "2.5.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:510
msgid ""
"While they are technically variables, module-level constants are "
"permitted and encouraged. For example: `_MAX_HOLY_HANDGRENADE_COUNT = 3`."
" Constants must be named using all caps with underscores. See "
"[Naming](#s3.16-naming) below."
msgstr ""

#: ../../google/python/pyguide.md:514
msgid ""
"If needed, globals should be declared at the module level and made "
"internal to the module by prepending an `_` to the name. External access "
"must be done through public module-level functions. See "
"[Naming](#s3.16-naming) below."
msgstr ""

#: ../../google/python/pyguide.md:518
msgid "<a id=\"s2.6-nested\"></a> <a id=\"26-nested\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:521
msgid "<a id=\"nested-classes-functions\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:522
msgid "2.6 Nested/Local/Inner Classes and Functions"
msgstr ""

#: ../../google/python/pyguide.md:524
msgid ""
"Nested local functions or classes are fine when used to close over a "
"local variable. Inner classes are fine."
msgstr ""

#: ../../google/python/pyguide.md:527
msgid "<a id=\"s2.6.1-definition\"></a> <a id=\"261-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:530
msgid "<a id=\"nested-classes-functions-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:531
msgid "2.6.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:533
msgid ""
"A class can be defined inside of a method, function, or class. A function"
" can be defined inside a method or function. Nested functions have read-"
"only access to variables defined in enclosing scopes."
msgstr ""

#: ../../google/python/pyguide.md:537
msgid "<a id=\"s2.6.2-pros\"></a> <a id=\"262-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:540
msgid "<a id=\"nested-classes-functions-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:541
msgid "2.6.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:543
msgid ""
"Allows definition of utility classes and functions that are only used "
"inside of a very limited scope. Very "
"[ADT](http://www.google.com/url?sa=D&q=http://en.wikipedia.org/wiki/Abstract_data_type)-y."
" Commonly used for implementing decorators."
msgstr ""

#: ../../google/python/pyguide.md:548
msgid "<a id=\"s2.6.3-cons\"></a> <a id=\"263-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:551
msgid "<a id=\"nested-classes-functions-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:552
msgid "2.6.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:554
msgid ""
"Nested functions and classes cannot be directly tested. Nesting can make "
"the outer function longer and less readable."
msgstr ""

#: ../../google/python/pyguide.md:557
msgid "<a id=\"s2.6.4-decision\"></a> <a id=\"264-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:560
msgid "<a id=\"nested-classes-functions-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:561
msgid "2.6.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:563
msgid ""
"They are fine with some caveats. Avoid nested functions or classes except"
" when closing over a local value other than `self` or `cls`. Do not nest "
"a function just to hide it from users of a module. Instead, prefix its "
"name with an \\_ at the module level so that it can still be accessed by "
"tests."
msgstr ""

#: ../../google/python/pyguide.md:568
msgid ""
"<a id=\"s2.7-comprehensions\"></a> <a "
"id=\"s2.7-list_comprehensions\"></a> <a "
"id=\"27-list_comprehensions\"></a> <a id=\"list_comprehensions\"></a> <a "
"id=\"list-comprehensions\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:574
msgid "<a id=\"comprehensions\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:575
msgid "2.7 Comprehensions & Generator Expressions"
msgstr ""

#: ../../google/python/pyguide.md:577
msgid "Okay to use for simple cases."
msgstr ""

#: ../../google/python/pyguide.md:579
msgid "<a id=\"s2.7.1-definition\"></a> <a id=\"271-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:582
msgid "<a id=\"comprehensions-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:583
msgid "2.7.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:585
msgid ""
"List, Dict, and Set comprehensions as well as generator expressions "
"provide a concise and efficient way to create container types and "
"iterators without resorting to the use of traditional loops, `map()`, "
"`filter()`, or `lambda`."
msgstr ""

#: ../../google/python/pyguide.md:589
msgid "<a id=\"s2.7.2-pros\"></a> <a id=\"272-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:592
msgid "<a id=\"comprehensions-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:593
msgid "2.7.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:595
msgid ""
"Simple comprehensions can be clearer and simpler than other dict, list, "
"or set creation techniques. Generator expressions can be very efficient, "
"since they avoid the creation of a list entirely."
msgstr ""

#: ../../google/python/pyguide.md:599
msgid "<a id=\"s2.7.3-cons\"></a> <a id=\"273-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:602
msgid "<a id=\"comprehensions-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:603
msgid "2.7.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:605
msgid "Complicated comprehensions or generator expressions can be hard to read."
msgstr ""

#: ../../google/python/pyguide.md:607
msgid "<a id=\"s2.7.4-decision\"></a> <a id=\"274-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:610
msgid "<a id=\"comprehensions-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:611
msgid "2.7.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:613
msgid ""
"Okay to use for simple cases. Each portion must fit on one line: mapping "
"expression, `for` clause, filter expression. Multiple `for` clauses or "
"filter expressions are not permitted. Use loops instead when things get "
"more complicated."
msgstr ""

#: ../../google/python/pyguide.md:668
msgid "<a id=\"s2.8-default-iterators-and-operators\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:670
msgid "<a id=\"default-iterators-operators\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:671
msgid "2.8 Default Iterators and Operators"
msgstr ""

#: ../../google/python/pyguide.md:673
msgid ""
"Use default iterators and operators for types that support them, like "
"lists, dictionaries, and files."
msgstr ""

#: ../../google/python/pyguide.md:676
msgid "<a id=\"s2.8.1-definition\"></a> <a id=\"281-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:679
msgid "<a id=\"default-iterators-operators-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:680
msgid "2.8.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:682
msgid ""
"Container types, like dictionaries and lists, define default iterators "
"and membership test operators (\"in\" and \"not in\")."
msgstr ""

#: ../../google/python/pyguide.md:685
msgid "<a id=\"s2.8.2-pros\"></a> <a id=\"282-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:688
msgid "<a id=\"default-iterators-operators-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:689
msgid "2.8.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:691
msgid ""
"The default iterators and operators are simple and efficient. They "
"express the operation directly, without extra method calls. A function "
"that uses default operators is generic. It can be used with any type that"
" supports the operation."
msgstr ""

#: ../../google/python/pyguide.md:695
msgid "<a id=\"s2.8.3-cons\"></a> <a id=\"283-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:698
msgid "<a id=\"default-iterators-operators-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:699
msgid "2.8.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:701
msgid ""
"You can't tell the type of objects by reading the method names (e.g. "
"`has_key()` means a dictionary). This is also an advantage."
msgstr ""

#: ../../google/python/pyguide.md:704
msgid "<a id=\"s2.8.4-decision\"></a> <a id=\"284-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:707
msgid "<a id=\"default-iterators-operators-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:708
msgid "2.8.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:710
msgid ""
"Use default iterators and operators for types that support them, like "
"lists, dictionaries, and files. The built-in types define iterator "
"methods, too. Prefer these methods to methods that return lists, except "
"that you should not mutate a container while iterating over it."
msgstr ""

#: ../../google/python/pyguide.md:731
msgid "<a id=\"s2.9-generators\"></a> <a id=\"29-generators\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:734
msgid "<a id=\"generators\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:735
msgid "2.9 Generators"
msgstr ""

#: ../../google/python/pyguide.md:737
msgid "Use generators as needed."
msgstr ""

#: ../../google/python/pyguide.md:739
msgid "<a id=\"s2.9.1-definition\"></a> <a id=\"291-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:742
msgid "<a id=\"generators-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:743
msgid "2.9 Definition"
msgstr ""

#: ../../google/python/pyguide.md:745
msgid ""
"A generator function returns an iterator that yields a value each time it"
" executes a yield statement. After it yields a value, the runtime state "
"of the generator function is suspended until the next value is needed."
msgstr ""

#: ../../google/python/pyguide.md:749
msgid "<a id=\"s2.9.2-pros\"></a> <a id=\"292-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:752
msgid "<a id=\"generators-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:753
msgid "2.9.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:755
msgid ""
"Simpler code, because the state of local variables and control flow are "
"preserved for each call. A generator uses less memory than a function "
"that creates an entire list of values at once."
msgstr ""

#: ../../google/python/pyguide.md:759
msgid "<a id=\"s2.9.3-cons\"></a> <a id=\"293-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:762
msgid "<a id=\"generators-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:763
msgid "2.9.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:765
msgid "None."
msgstr ""

#: ../../google/python/pyguide.md:767
msgid "<a id=\"s2.9.4-decision\"></a> <a id=\"294-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:770
msgid "<a id=\"generators-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:771
msgid "2.9.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:773
msgid ""
"Fine. Use \"Yields:\" rather than \"Returns:\" in the docstring for "
"generator functions."
msgstr ""

#: ../../google/python/pyguide.md:776
msgid "<a id=\"s2.10-lambda-functions\"></a> <a id=\"210-lambda-functions\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:779
msgid "<a id=\"lambdas\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:780
msgid "2.10 Lambda Functions"
msgstr ""

#: ../../google/python/pyguide.md:782
msgid ""
"Okay for one-liners. Prefer generator expressions over `map()` or "
"`filter()` with a `lambda`."
msgstr ""

#: ../../google/python/pyguide.md:785
msgid "<a id=\"s2.10.1-definition\"></a> <a id=\"2101-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:788
msgid "<a id=\"lambdas-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:789
msgid "2.10.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:791
msgid ""
"Lambdas define anonymous functions in an expression, as opposed to a "
"statement."
msgstr ""

#: ../../google/python/pyguide.md:793
msgid "<a id=\"s2.10.2-pros\"></a> <a id=\"2102-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:796
msgid "<a id=\"lambdas-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:797
msgid "2.10.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:799
msgid "Convenient."
msgstr ""

#: ../../google/python/pyguide.md:801
msgid "<a id=\"s2.10.3-cons\"></a> <a id=\"2103-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:804
msgid "<a id=\"lambdas-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:805
msgid "2.10.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:807
msgid ""
"Harder to read and debug than local functions. The lack of names means "
"stack traces are more difficult to understand. Expressiveness is limited "
"because the function may only contain an expression."
msgstr ""

#: ../../google/python/pyguide.md:811
msgid "<a id=\"s2.10.4-decision\"></a> <a id=\"2104-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:814
msgid "<a id=\"lambdas-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:815
msgid "2.10.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:817
msgid ""
"Okay to use them for one-liners. If the code inside the lambda function "
"is longer than 60-80 chars, it's probably better to define it as a "
"regular [nested function](#lexical-scoping)."
msgstr ""

#: ../../google/python/pyguide.md:821
msgid ""
"For common operations like multiplication, use the functions from the "
"`operator` module instead of lambda functions. For example, prefer "
"`operator.mul` to `lambda x, y: x * y`."
msgstr ""

#: ../../google/python/pyguide.md:825
msgid ""
"<a id=\"s2.11-conditional-expressions\"></a> <a id=\"211-conditional-"
"expressions\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:828
msgid "<a id=\"conditional-expressions\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:829
msgid "2.11 Conditional Expressions"
msgstr ""

#: ../../google/python/pyguide.md:831
msgid "Okay for simple cases."
msgstr ""

#: ../../google/python/pyguide.md:833
msgid "<a id=\"s2.11.1-definition\"></a> <a id=\"2111-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:836
msgid "<a id=\"conditional-expressions-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:837
msgid "2.11.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:839
msgid ""
"Conditional expressions (sometimes called a “ternary operator”) are "
"mechanisms that provide a shorter syntax for if statements. For example: "
"`x = 1 if cond else 2`."
msgstr ""

#: ../../google/python/pyguide.md:843
msgid "<a id=\"s2.11.2-pros\"></a> <a id=\"2112-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:846
msgid "<a id=\"conditional-expressions-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:847
msgid "2.11.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:849
msgid "Shorter and more convenient than an if statement."
msgstr ""

#: ../../google/python/pyguide.md:851
msgid "<a id=\"s2.11.3-cons\"></a> <a id=\"2113-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:854
msgid "<a id=\"conditional-expressions-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:855
msgid "2.11.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:857
msgid ""
"May be harder to read than an if statement. The condition may be "
"difficult to locate if the expression is long."
msgstr ""

#: ../../google/python/pyguide.md:860
msgid "<a id=\"s2.11.4-decision\"></a> <a id=\"2114-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:863
msgid "<a id=\"conditional-expressions-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:864
msgid "2.11.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:866
msgid ""
"Okay to use for simple cases. Each portion must fit on one line: true-"
"expression, if-expression, else-expression. Use a complete if statement "
"when things get more complicated."
msgstr ""

#: ../../google/python/pyguide.md:891
msgid ""
"<a id=\"s2.12-default-argument-values\"></a> <a id=\"212-default-"
"argument-values\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:894
msgid "<a id=\"default-arguments\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:895
msgid "2.12 Default Argument Values"
msgstr ""

#: ../../google/python/pyguide.md:897
msgid "Okay in most cases."
msgstr ""

#: ../../google/python/pyguide.md:899
msgid "<a id=\"s2.12.1-definition\"></a> <a id=\"2121-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:902
msgid "<a id=\"default-arguments-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:903
msgid "2.12.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:905
msgid ""
"You can specify values for variables at the end of a function's parameter"
" list, e.g., `def foo(a, b=0):`. If `foo` is called with only one "
"argument, `b` is set to 0. If it is called with two arguments, `b` has "
"the value of the second argument."
msgstr ""

#: ../../google/python/pyguide.md:910
msgid "<a id=\"s2.12.2-pros\"></a> <a id=\"2122-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:913
msgid "<a id=\"default-arguments-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:914
msgid "2.12.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:916
msgid ""
"Often you have a function that uses lots of default values, but on rare "
"occasions you want to override the defaults. Default argument values "
"provide an easy way to do this, without having to define lots of "
"functions for the rare exceptions. As Python does not support overloaded "
"methods/functions, default arguments are an easy way of \"faking\" the "
"overloading behavior."
msgstr ""

#: ../../google/python/pyguide.md:922
msgid "<a id=\"s2.12.3-cons\"></a> <a id=\"2123-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:925
msgid "<a id=\"default-arguments-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:926
msgid "2.12.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:928
msgid ""
"Default arguments are evaluated once at module load time. This may cause "
"problems if the argument is a mutable object such as a list or a "
"dictionary. If the function modifies the object (e.g., by appending an "
"item to a list), the default value is modified."
msgstr ""

#: ../../google/python/pyguide.md:933
msgid "<a id=\"s2.12.4-decision\"></a> <a id=\"2124-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:936
msgid "<a id=\"default-arguments-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:937
msgid "2.12.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:939
msgid "Okay to use with the following caveat:"
msgstr ""

#: ../../google/python/pyguide.md:941
msgid ""
"Do not use mutable objects as default values in the function or method "
"definition."
msgstr ""

#: ../../google/python/pyguide.md:966
msgid "<a id=\"s2.13-properties\"></a> <a id=\"213-properties\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:969
msgid "<a id=\"properties\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:970
msgid "2.13 Properties"
msgstr ""

#: ../../google/python/pyguide.md:972
msgid ""
"Properties may be used to control getting or setting attributes that "
"require trivial, but unsurprising, computations or logic. Property "
"implementations must match the general expectations of regular attribute "
"access: that they are cheap, straightforward, and unsurprising."
msgstr ""

#: ../../google/python/pyguide.md:977
msgid "<a id=\"s2.13.1-definition\"></a> <a id=\"2131-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:980
msgid "<a id=\"properties-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:981
msgid "2.13.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:983
msgid ""
"A way to wrap method calls for getting and setting an attribute as a "
"standard attribute access when the computation is lightweight."
msgstr ""

#: ../../google/python/pyguide.md:986
msgid "<a id=\"s2.13.2-pros\"></a> <a id=\"2132-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:989
msgid "<a id=\"properties-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:990
msgid "2.13.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:992
msgid ""
"Readability is increased by eliminating explicit get and set method calls"
" for simple attribute access. Allows calculations to be lazy. Considered "
"the Pythonic way to maintain the interface of a class. In terms of "
"performance, allowing properties bypasses needing trivial accessor "
"methods when a direct variable access is reasonable. This also allows "
"accessor methods to be added in the future without breaking the "
"interface."
msgstr ""

#: ../../google/python/pyguide.md:999
msgid "<a id=\"s2.13.3-cons\"></a> <a id=\"2133-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1002
msgid "<a id=\"properties-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1003
msgid "2.13.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:1005
msgid ""
"Can hide side-effects much like operator overloading. Can be confusing "
"for subclasses."
msgstr ""

#: ../../google/python/pyguide.md:1008
msgid "<a id=\"s2.13.4-decision\"></a> <a id=\"2134-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1011
msgid "<a id=\"properties-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1012
msgid "2.13.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:1014
msgid ""
"Properties are allowed, but, like operator overloading, should only be "
"used when necessary and match the expectations of typical attribute "
"access; follow the [getters and setters](#getters-and-setters) rules "
"otherwise."
msgstr ""

#: ../../google/python/pyguide.md:1018
msgid ""
"For example, using a property to simply both get and set an internal "
"attribute isn't allowed: there is no computation occurring, so the "
"property is unnecessary ([make it public instead](#getters-and-setters))."
" In comparison, using a property to control attribute access, or "
"calculate a *trivially* derived value, is allowed: the logic is trivial, "
"but unsurprising."
msgstr ""

#: ../../google/python/pyguide.md:1024
msgid ""
"Properties should be created with the `@property` [decorator](#s2.17"
"-function-and-method-decorators). Manually implementing a property "
"descriptor is considered a [power feature](#power-features)."
msgstr ""

#: ../../google/python/pyguide.md:1028
msgid ""
"Inheritance with properties can be non-obvious if the property itself is "
"not overridden. Thus one must make sure that accessor methods are called "
"indirectly to ensure methods overridden in subclasses are called by the "
"property (using the [template method design "
"pattern](https://en.wikipedia.org/wiki/Template_method_pattern))."
msgstr ""

#: ../../google/python/pyguide.md:1077
msgid ""
"<a id=\"s2.14-truefalse-evaluations\"></a> <a id=\"214-truefalse-"
"evaluations\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1080
msgid "<a id=\"truefalse-evaluations\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1081
msgid "2.14 True/False Evaluations"
msgstr ""

#: ../../google/python/pyguide.md:1083
msgid "Use the \"implicit\" false if at all possible."
msgstr ""

#: ../../google/python/pyguide.md:1085
msgid "<a id=\"s2.14.1-definition\"></a> <a id=\"2141-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1088
msgid "<a id=\"truefalse-evaluations-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1089
msgid "2.14.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:1091
msgid ""
"Python evaluates certain values as `False` when in a boolean context. A "
"quick \"rule of thumb\" is that all \"empty\" values are considered "
"false, so `0, None, [], {}, ''` all evaluate as false in a boolean "
"context."
msgstr ""

#: ../../google/python/pyguide.md:1095
msgid "<a id=\"s2.14.2-pros\"></a> <a id=\"2142-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1098
msgid "<a id=\"truefalse-evaluations-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1099
msgid "2.14.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:1101
msgid ""
"Conditions using Python booleans are easier to read and less error-prone."
" In most cases, they're also faster."
msgstr ""

#: ../../google/python/pyguide.md:1104
msgid "<a id=\"s2.14.3-cons\"></a> <a id=\"2143-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1107
msgid "<a id=\"truefalse-evaluations-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1108
msgid "2.14.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:1110
msgid "May look strange to C/C++ developers."
msgstr ""

#: ../../google/python/pyguide.md:1112
msgid "<a id=\"s2.14.4-decision\"></a> <a id=\"2144-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1115
msgid "<a id=\"truefalse-evaluations-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1116
msgid "2.14.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:1118
msgid ""
"Use the \"implicit\" false if possible, e.g., `if foo:` rather than `if "
"foo != []:`. There are a few caveats that you should keep in mind though:"
msgstr ""

#: ../../google/python/pyguide.md:1121
msgid ""
"Always use `if foo is None:` (or `is not None`) to check for a `None` "
"value. E.g., when testing whether a variable or argument that defaults to"
" `None` was set to some other value. The other value might be a value "
"that's false in a boolean context!"
msgstr ""

#: ../../google/python/pyguide.md:1126
msgid ""
"Never compare a boolean variable to `False` using `==`. Use `if not x:` "
"instead. If you need to distinguish `False` from `None` then chain the "
"expressions, such as `if not x and x is not None:`."
msgstr ""

#: ../../google/python/pyguide.md:1130
msgid ""
"For sequences (strings, lists, tuples), use the fact that empty sequences"
" are false, so `if seq:` and `if not seq:` are preferable to `if "
"len(seq):` and `if not len(seq):` respectively."
msgstr ""

#: ../../google/python/pyguide.md:1134
msgid ""
"When handling integers, implicit false may involve more risk than benefit"
" (i.e., accidentally handling `None` as 0). You may compare a value which"
" is known to be an integer (and is not the result of `len()`) against the"
" integer 0."
msgstr ""

#: ../../google/python/pyguide.md:1162
msgid "Note that `'0'` (i.e., `0` as string) evaluates to true."
msgstr ""

#: ../../google/python/pyguide.md:1164
msgid "<a id=\"s2.16-lexical-scoping\"></a> <a id=\"216-lexical-scoping\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1167
msgid "<a id=\"lexical-scoping\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1168
msgid "2.16 Lexical Scoping"
msgstr ""

#: ../../google/python/pyguide.md:1170 ../../google/python/pyguide.md:1236
msgid "Okay to use."
msgstr ""

#: ../../google/python/pyguide.md:1172
msgid "<a id=\"s2.16.1-definition\"></a> <a id=\"2161-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1175
msgid "<a id=\"lexical-scoping-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1176
msgid "2.16.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:1178
msgid ""
"A nested Python function can refer to variables defined in enclosing "
"functions, but cannot assign to them. Variable bindings are resolved "
"using lexical scoping, that is, based on the static program text. Any "
"assignment to a name in a block will cause Python to treat all references"
" to that name as a local variable, even if the use precedes the "
"assignment. If a global declaration occurs, the name is treated as a "
"global variable."
msgstr ""

#: ../../google/python/pyguide.md:1185
msgid "An example of the use of this feature is:"
msgstr ""

#: ../../google/python/pyguide.md:1196
msgid "<a id=\"s2.16.2-pros\"></a> <a id=\"2162-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1199
msgid "<a id=\"lexical-scoping-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1200
msgid "2.16.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:1202
msgid ""
"Often results in clearer, more elegant code. Especially comforting to "
"experienced Lisp and Scheme (and Haskell and ML and ...) programmers."
msgstr ""

#: ../../google/python/pyguide.md:1205
msgid "<a id=\"s2.16.3-cons\"></a> <a id=\"2163-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1208
msgid "<a id=\"lexical-scoping-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1209
msgid "2.16.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:1211
msgid ""
"Can lead to confusing bugs. Such as this example based on "
"[PEP-0227](http://www.google.com/url?sa=D&q=http://www.python.org/dev/peps/pep-0227/):"
msgstr ""

#: ../../google/python/pyguide.md:1227
msgid "So `foo([1, 2, 3])` will print `1 2 3 3`, not `1 2 3 4`."
msgstr ""

#: ../../google/python/pyguide.md:1230
msgid "<a id=\"s2.16.4-decision\"></a> <a id=\"2164-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1233
msgid "<a id=\"lexical-scoping-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1234
msgid "2.16.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:1238
msgid ""
"<a id=\"s2.17-function-and-method-decorators\"></a> <a id=\"217-function-"
"and-method-decorators\"></a> <a id=\"function-and-method-"
"decorators\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1242
msgid "<a id=\"decorators\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1243
msgid "2.17 Function and Method Decorators"
msgstr ""

#: ../../google/python/pyguide.md:1245
msgid ""
"Use decorators judiciously when there is a clear advantage. Avoid "
"`staticmethod` and limit use of `classmethod`."
msgstr ""

#: ../../google/python/pyguide.md:1248
msgid "<a id=\"s2.17.1-definition\"></a> <a id=\"2171-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1251
msgid "<a id=\"decorators-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1252
msgid "2.17.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:1254
msgid ""
"[Decorators for Functions and "
"Methods](https://docs.python.org/3/glossary.html#term-decorator) (a.k.a "
"\"the `@` notation\"). One common decorator is `@property`, used for "
"converting ordinary methods into dynamically computed attributes. "
"However, the decorator syntax allows for user-defined decorators as well."
" Specifically, for some function `my_decorator`, this:"
msgstr ""

#: ../../google/python/pyguide.md:1267
msgid "is equivalent to:"
msgstr ""

#: ../../google/python/pyguide.md:1276
msgid "<a id=\"s2.17.2-pros\"></a> <a id=\"2172-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1279
msgid "<a id=\"decorators-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1280
msgid "2.17.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:1282
msgid ""
"Elegantly specifies some transformation on a method; the transformation "
"might eliminate some repetitive code, enforce invariants, etc."
msgstr ""

#: ../../google/python/pyguide.md:1285
msgid "<a id=\"s2.17.3-cons\"></a> <a id=\"2173-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1288
msgid "<a id=\"decorators-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1289
msgid "2.17.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:1291
msgid ""
"Decorators can perform arbitrary operations on a function's arguments or "
"return values, resulting in surprising implicit behavior. Additionally, "
"decorators execute at import time. Failures in decorator code are pretty "
"much impossible to recover from."
msgstr ""

#: ../../google/python/pyguide.md:1296
msgid "<a id=\"s2.17.4-decision\"></a> <a id=\"2174-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1299
msgid "<a id=\"decorators-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1300
msgid "2.17.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:1302
msgid ""
"Use decorators judiciously when there is a clear advantage. Decorators "
"should follow the same import and naming guidelines as functions. "
"Decorator pydoc should clearly state that the function is a decorator. "
"Write unit tests for decorators."
msgstr ""

#: ../../google/python/pyguide.md:1307
msgid ""
"Avoid external dependencies in the decorator itself (e.g. don't rely on "
"files, sockets, database connections, etc.), since they might not be "
"available when the decorator runs (at import time, perhaps from `pydoc` "
"or other tools). A decorator that is called with valid parameters should "
"(as much as possible) be guaranteed to succeed in all cases."
msgstr ""

#: ../../google/python/pyguide.md:1313
msgid ""
"Decorators are a special case of \"top level code\" - see "
"[main](#s3.17-main) for more discussion."
msgstr ""

#: ../../google/python/pyguide.md:1316
msgid ""
"Never use `staticmethod` unless forced to in order to integrate with an "
"API defined in an existing library. Write a module level function "
"instead."
msgstr ""

#: ../../google/python/pyguide.md:1319
msgid ""
"Use `classmethod` only when writing a named constructor or a class-"
"specific routine that modifies necessary global state such as a process-"
"wide cache."
msgstr ""

#: ../../google/python/pyguide.md:1322
msgid "<a id=\"s2.18-threading\"></a> <a id=\"218-threading\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1325
msgid "<a id=\"threading\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1326
msgid "2.18 Threading"
msgstr ""

#: ../../google/python/pyguide.md:1328
msgid "Do not rely on the atomicity of built-in types."
msgstr ""

#: ../../google/python/pyguide.md:1330
msgid ""
"While Python's built-in data types such as dictionaries appear to have "
"atomic operations, there are corner cases where they aren't atomic (e.g. "
"if `__hash__` or `__eq__` are implemented as Python methods) and their "
"atomicity should not be relied upon. Neither should you rely on atomic "
"variable assignment (since this in turn depends on dictionaries)."
msgstr ""

#: ../../google/python/pyguide.md:1336
msgid ""
"Use the Queue module's `Queue` data type as the preferred way to "
"communicate data between threads. Otherwise, use the threading module and"
" its locking primitives. Prefer condition variables and "
"`threading.Condition` instead of using lower-level locks."
msgstr ""

#: ../../google/python/pyguide.md:1341
msgid "<a id=\"s2.19-power-features\"></a> <a id=\"219-power-features\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1344
msgid "<a id=\"power-features\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1345
msgid "2.19 Power Features"
msgstr ""

#: ../../google/python/pyguide.md:1347
msgid "Avoid these features."
msgstr ""

#: ../../google/python/pyguide.md:1349
msgid "<a id=\"s2.19.1-definition\"></a> <a id=\"2191-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1352
msgid "<a id=\"power-features-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1353
msgid "2.19.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:1355
msgid ""
"Python is an extremely flexible language and gives you many fancy "
"features such as custom metaclasses, access to bytecode, on-the-fly "
"compilation, dynamic inheritance, object reparenting, import hacks, "
"reflection (e.g. some uses of `getattr()`), modification of system "
"internals, `__del__` methods implementing customized cleanup, etc."
msgstr ""

#: ../../google/python/pyguide.md:1361
msgid "<a id=\"s2.19.2-pros\"></a> <a id=\"2192-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1364
msgid "<a id=\"power-features-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1365
msgid "2.19.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:1367
msgid ""
"These are powerful language features. They can make your code more "
"compact."
msgstr ""

#: ../../google/python/pyguide.md:1369
msgid "<a id=\"s2.19.3-cons\"></a> <a id=\"2193-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1372
msgid "<a id=\"power-features-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1373
msgid "2.19.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:1375
msgid ""
"It's very tempting to use these \"cool\" features when they're not "
"absolutely necessary. It's harder to read, understand, and debug code "
"that's using unusual features underneath. It doesn't seem that way at "
"first (to the original author), but when revisiting the code, it tends to"
" be more difficult than code that is longer but is straightforward."
msgstr ""

#: ../../google/python/pyguide.md:1381
msgid "<a id=\"s2.19.4-decision\"></a> <a id=\"2194-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1384
msgid "<a id=\"power-features-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1385
msgid "2.19.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:1387
msgid "Avoid these features in your code."
msgstr ""

#: ../../google/python/pyguide.md:1389
msgid ""
"Standard library modules and classes that internally use these features "
"are okay to use (for example, `abc.ABCMeta`, `dataclasses`, and `enum`)."
msgstr ""

#: ../../google/python/pyguide.md:1392
msgid "<a id=\"s2.20-modern-python\"></a> <a id=\"220-modern-python\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1395
msgid "<a id=\"modern-python\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1396
msgid "2.20 Modern Python: from \\_\\_future\\_\\_ imports"
msgstr ""

#: ../../google/python/pyguide.md:1398
msgid ""
"New language version semantic changes may be gated behind a special "
"future import to enable them on a per-file basis within earlier runtimes."
msgstr ""

#: ../../google/python/pyguide.md:1401
msgid "<a id=\"s2.20.1-definition\"></a> <a id=\"2201-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1404
msgid "<a id=\"modern-python-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1405
msgid "2.20.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:1407
msgid ""
"Being able to turn on some of the more modern features via `from "
"__future__ import` statements allows early use of features from expected "
"future Python versions."
msgstr ""

#: ../../google/python/pyguide.md:1411
msgid "<a id=\"s2.20.2-pros\"></a> <a id=\"2202-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1414
msgid "<a id=\"modern-python-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1415
msgid "2.20.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:1417
msgid ""
"This has proven to make runtime version upgrades smoother as changes can "
"be made on a per-file basis while declaring compatibility and preventing "
"regressions within those files. Modern code is more maintainable as it is"
" less likely to accumulate technical debt that will be problematic during"
" future runtime upgrades."
msgstr ""

#: ../../google/python/pyguide.md:1423
msgid "<a id=\"s2.20.3-cons\"></a> <a id=\"2203-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1426
msgid "<a id=\"modern-python-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1427
msgid "2.20.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:1429
msgid ""
"Such code may not work on very old interpreter versions prior to the "
"introduction of the needed future statement. The need for this is more "
"common in projects supporting an extremely wide variety of environments."
msgstr ""

#: ../../google/python/pyguide.md:1433
msgid "<a id=\"s2.20.4-decision\"></a> <a id=\"2204-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1436
msgid "<a id=\"modern-python-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1437
msgid "2.20.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:1439
msgid "from \\_\\_future\\_\\_ imports"
msgstr ""

#: ../../google/python/pyguide.md:1441
msgid ""
"Use of `from __future__ import` statements is encouraged. It allows a "
"given source file to start using more modern Python syntax features "
"today. Once you no longer need to run on a version where the features are"
" hidden behind a `__future__` import, feel free to remove those lines."
msgstr ""

#: ../../google/python/pyguide.md:1446
msgid ""
"In code that may execute on versions as old as 3.5 rather than >= 3.7, "
"import:"
msgstr ""

#: ../../google/python/pyguide.md:1452
msgid "For legacy code with the burden of continuing to support 2.7, import:"
msgstr ""

#: ../../google/python/pyguide.md:1460
msgid ""
"For more information read the [Python future statement "
"definitions](https://docs.python.org/3/library/__future__.html) "
"documentation."
msgstr ""

#: ../../google/python/pyguide.md:1464
msgid ""
"Please don't remove these imports until you are confident the code is "
"only ever used in a sufficiently modern environment. Even if you do not "
"currently use the feature a specific future import enables in your code "
"today, keeping it in place in the file prevents later modifications of "
"the code from inadvertently depending on the older behavior."
msgstr ""

#: ../../google/python/pyguide.md:1470
msgid ""
"Use other `from __future__` import statements as you see fit. We did not "
"include `unicode_literals` in our recommendations for 2.7 as it was not a"
" clear win due to implicit default codec conversion consequences it "
"introduced in many places within 2.7. Most dual-version 2-and-3 code was "
"better off with explicit use of `b''` and `u''` bytes and unicode string "
"literals where necessary."
msgstr ""

#: ../../google/python/pyguide.md:1476
msgid "The six, future, and past libraries"
msgstr ""

#: ../../google/python/pyguide.md:1478
msgid ""
"When your project still needs to support use under both Python 2 and 3, "
"use the [six](https://pypi.org/project/six/), "
"[future](https://pypi.org/project/future/), and "
"[past](https://pypi.org/project/past/) libraries as you see fit. They "
"exist to make your code cleaner and life easier."
msgstr ""

#: ../../google/python/pyguide.md:1484
msgid ""
"<a id=\"s2.21-type-annotated-code\"></a> <a id=\"s2.21-typed-code\"></a> "
"<a id=\"221-type-annotated-code\"></a> <a id=\"typed-code\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1489
msgid "<a id=\"typed-code\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1490
msgid "2.21 Type Annotated Code"
msgstr ""

#: ../../google/python/pyguide.md:1492
msgid ""
"You can annotate Python 3 code with type hints according to "
"[PEP-484](https://www.python.org/dev/peps/pep-0484/), and type-check the "
"code at build time with a type checking tool like "
"[pytype](https://github.com/google/pytype)."
msgstr ""

#: ../../google/python/pyguide.md:1497
msgid ""
"Type annotations can be in the source or in a [stub pyi "
"file](https://www.python.org/dev/peps/pep-0484/#stub-files). Whenever "
"possible, annotations should be in the source. Use pyi files for third-"
"party or extension modules."
msgstr ""

#: ../../google/python/pyguide.md:1503
msgid "<a id=\"s2.21.1-definition\"></a> <a id=\"2211-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1506
msgid "<a id=\"typed-code-definition\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1507
msgid "2.21.1 Definition"
msgstr ""

#: ../../google/python/pyguide.md:1509
msgid ""
"Type annotations (or \"type hints\") are for function or method arguments"
" and return values:"
msgstr ""

#: ../../google/python/pyguide.md:1516
msgid ""
"You can also declare the type of a variable using similar "
"[PEP-526](https://www.python.org/dev/peps/pep-0526/) syntax:"
msgstr ""

#: ../../google/python/pyguide.md:1523
msgid ""
"Or by using a type comment in code that must support legacy Python "
"versions."
msgstr ""

#: ../../google/python/pyguide.md:1529
msgid "<a id=\"s2.21.2-pros\"></a> <a id=\"2212-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1532
msgid "<a id=\"typed-code-pros\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1533
msgid "2.21.2 Pros"
msgstr ""

#: ../../google/python/pyguide.md:1535
msgid ""
"Type annotations improve the readability and maintainability of your "
"code. The type checker will convert many runtime errors to build-time "
"errors, and reduce your ability to use [Power Features](#power-features)."
msgstr ""

#: ../../google/python/pyguide.md:1539
msgid "<a id=\"s2.21.3-cons\"></a> <a id=\"2213-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1542
msgid "<a id=\"typed-code-cons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1543
msgid "2.21.3 Cons"
msgstr ""

#: ../../google/python/pyguide.md:1545
msgid ""
"You will have to keep the type declarations up to date. You might see "
"type errors that you think are valid code. Use of a [type "
"checker](https://github.com/google/pytype) may reduce your ability to use"
" [Power Features](#power-features)."
msgstr ""

#: ../../google/python/pyguide.md:1551
msgid "<a id=\"s2.21.4-decision\"></a> <a id=\"2214-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1554
msgid "<a id=\"typed-code-decision\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1555
msgid "2.21.4 Decision"
msgstr ""

#: ../../google/python/pyguide.md:1557
msgid ""
"You are strongly encouraged to enable Python type analysis when updating "
"code. When adding or modifying public APIs, include type annotations and "
"enable checking via pytype in the build system. As static analysis is "
"relatively new to Python, we acknowledge that undesired side-effects "
"(such as wrongly inferred types) may prevent adoption by some projects. "
"In those situations, authors are encouraged to add a comment with a TODO "
"or link to a bug describing the issue(s) currently preventing type "
"annotation adoption in the BUILD file or in the code itself as "
"appropriate."
msgstr ""

#: ../../google/python/pyguide.md:1567
msgid "<a id=\"s3-python-style-rules\"></a> <a id=\"3-python-style-rules\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1570
msgid "<a id=\"python-style-rules\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1571
msgid "3 Python Style Rules"
msgstr ""

#: ../../google/python/pyguide.md:1573
msgid "<a id=\"s3.1-semicolons\"></a> <a id=\"31-semicolons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1576
msgid "<a id=\"semicolons\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1577
msgid "3.1 Semicolons"
msgstr ""

#: ../../google/python/pyguide.md:1579
msgid ""
"Do not terminate your lines with semicolons, and do not use semicolons to"
" put two statements on the same line."
msgstr ""

#: ../../google/python/pyguide.md:1582
msgid "<a id=\"s3.2-line-length\"></a> <a id=\"32-line-length\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1585
msgid "<a id=\"line-length\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1586
msgid "3.2 Line length"
msgstr ""

#: ../../google/python/pyguide.md:1588
msgid "Maximum line length is *80 characters*."
msgstr ""

#: ../../google/python/pyguide.md:1590
msgid "Explicit exceptions to the 80 character limit:"
msgstr ""

#: ../../google/python/pyguide.md:1592
msgid "Long import statements."
msgstr ""

#: ../../google/python/pyguide.md:1593
msgid "URLs, pathnames, or long flags in comments."
msgstr ""

#: ../../google/python/pyguide.md:1594
msgid ""
"Long string module level constants not containing whitespace that would "
"be inconvenient to split across lines such as URLs or pathnames."
msgstr ""

#: ../../google/python/pyguide.md:1596
msgid "Pylint disable comments. (e.g.: `# pylint: disable=invalid-name`)"
msgstr ""

#: ../../google/python/pyguide.md:1598
msgid ""
"Do not use backslash line continuation except for `with` statements "
"requiring three or more context managers."
msgstr ""

#: ../../google/python/pyguide.md:1601
msgid ""
"Make use of Python's [implicit line joining inside parentheses, brackets "
"and braces](http://docs.python.org/reference/lexical_analysis.html"
"#implicit-line-joining). If necessary, you can add an extra pair of "
"parentheses around an expression."
msgstr ""

#: ../../google/python/pyguide.md:1613
msgid ""
"When a literal string won't fit on a single line, use parentheses for "
"implicit line joining."
msgstr ""

#: ../../google/python/pyguide.md:1621
msgid "Within comments, put long URLs on their own line if necessary."
msgstr ""

#: ../../google/python/pyguide.md:1634
msgid ""
"It is permissible to use backslash continuation when defining a `with` "
"statement whose expressions span three or more lines. For two lines of "
"expressions, use a nested `with` statement:"
msgstr ""

#: ../../google/python/pyguide.md:1657
msgid ""
"Make note of the indentation of the elements in the line continuation "
"examples above; see the [indentation](#s3.4-indentation) section for "
"explanation."
msgstr ""

#: ../../google/python/pyguide.md:1660
msgid ""
"In all other cases where a line exceeds 80 characters, and the "
"[yapf](https://github.com/google/yapf/) auto-formatter does not help "
"bring the line below the limit, the line is allowed to exceed this "
"maximum. Authors are encouraged to manually break the line up per the "
"notes above when it is sensible."
msgstr ""

#: ../../google/python/pyguide.md:1666
msgid "<a id=\"s3.3-parentheses\"></a> <a id=\"33-parentheses\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1669
msgid "<a id=\"parentheses\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1670
msgid "3.3 Parentheses"
msgstr ""

#: ../../google/python/pyguide.md:1672
msgid "Use parentheses sparingly."
msgstr ""

#: ../../google/python/pyguide.md:1674
msgid ""
"It is fine, though not required, to use parentheses around tuples. Do not"
" use them in return statements or conditional statements unless using "
"parentheses for implied line continuation or to indicate a tuple."
msgstr ""

#: ../../google/python/pyguide.md:1703
msgid "<a id=\"s3.4-indentation\"></a> <a id=\"34-indentation\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1706
msgid "<a id=\"indentation\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1707
msgid "3.4 Indentation"
msgstr ""

#: ../../google/python/pyguide.md:1709
msgid "Indent your code blocks with *4 spaces*."
msgstr ""

#: ../../google/python/pyguide.md:1711
msgid ""
"Never use tabs or mix tabs and spaces. In cases of implied line "
"continuation, you should align wrapped elements either vertically, as per"
" the examples in the [line length](#s3.2-line-length) section; or using a"
" hanging indent of 4 spaces, in which case there should be nothing after "
"the open parenthesis or bracket on the first line."
msgstr ""

#: ../../google/python/pyguide.md:1767
msgid ""
"<a id=\"s3.4.1-trailing-comma\"></a> <a id=\"s3.4.1-trailing-"
"commas\"></a> <a id=\"s3.4.1-trailing_comma\"></a> <a "
"id=\"s3.4.1-trailing_commas\"></a> <a id=\"341-trailing_comma\"></a> <a "
"id=\"341-trailing_commas\"></a> <a id=\"trailing_comma\"></a> <a "
"id=\"trailing_commas\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1776
msgid "<a id=\"trailing-comma\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1777
msgid "3.4.1 Trailing commas in sequences of items?"
msgstr ""

#: ../../google/python/pyguide.md:1779
msgid ""
"Trailing commas in sequences of items are recommended only when the "
"closing container token `]`, `)`, or `}` does not appear on the same line"
" as the final element. The presence of a trailing comma is also used as a"
" hint to our Python code auto-formatter "
"[YAPF](https://pypi.org/project/yapf/) to direct it to auto-format the "
"container of items to one item per line when the `,` after the final "
"element is present."
msgstr ""

#: ../../google/python/pyguide.md:1804
msgid "<a id=\"s3.5-blank-lines\"></a> <a id=\"35-blank-lines\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1807
msgid "<a id=\"blank-lines\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1808
msgid "3.5 Blank Lines"
msgstr ""

#: ../../google/python/pyguide.md:1810
msgid ""
"Two blank lines between top-level definitions, be they function or class "
"definitions. One blank line between method definitions and between the "
"`class` line and the first method. No blank line following a `def` line. "
"Use single blank lines as you judge appropriate within functions or "
"methods."
msgstr ""

#: ../../google/python/pyguide.md:1815
msgid ""
"Blank lines need not be anchored to the definition. For example, related "
"comments immediately preceding function, class, and method definitions "
"can make sense. Consider if your comment might be more useful as part of "
"the docstring."
msgstr ""

#: ../../google/python/pyguide.md:1819
msgid "<a id=\"s3.6-whitespace\"></a> <a id=\"36-whitespace\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1822
msgid "<a id=\"whitespace\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1823
msgid "3.6 Whitespace"
msgstr ""

#: ../../google/python/pyguide.md:1825
msgid ""
"Follow standard typographic rules for the use of spaces around "
"punctuation."
msgstr ""

#: ../../google/python/pyguide.md:1827
msgid "No whitespace inside parentheses, brackets or braces."
msgstr ""

#: ../../google/python/pyguide.md:1837
msgid ""
"No whitespace before a comma, semicolon, or colon. Do use whitespace "
"after a comma, semicolon, or colon, except at the end of the line."
msgstr ""

#: ../../google/python/pyguide.md:1852
msgid ""
"No whitespace before the open paren/bracket that starts an argument list,"
" indexing or slicing."
msgstr ""

#: ../../google/python/pyguide.md:1871
msgid "No trailing whitespace."
msgstr ""

#: ../../google/python/pyguide.md:1873
msgid ""
"Surround binary operators with a single space on either side for "
"assignment (`=`), comparisons (`==, <, >, !=, <>, <=, >=, in, not in, is,"
" is not`), and Booleans (`and, or, not`). Use your better judgment for "
"the insertion of spaces around arithmetic operators (`+`, `-`, `*`, `/`, "
"`//`, `%`, `**`, `@`)."
msgstr ""

#: ../../google/python/pyguide.md:1886
msgid ""
"Never use spaces around `=` when passing keyword arguments or defining a "
"default parameter value, with one exception: [when a type annotation is "
"present](#typing-default-values), _do_ use spaces around the `=` for the "
"default parameter value."
msgstr ""

#: ../../google/python/pyguide.md:1901
msgid ""
"Don't use spaces to vertically align tokens on consecutive lines, since "
"it becomes a maintenance burden (applies to `:`, `#`, `=`, etc.):"
msgstr ""

#: ../../google/python/pyguide.md:1927
msgid ""
"<a id=\"Python_Interpreter\"></a> <a id=\"s3.7-shebang-line\"></a> <a "
"id=\"37-shebang-line\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1931
msgid "<a id=\"shebang-line\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1932
msgid "3.7 Shebang Line"
msgstr ""

#: ../../google/python/pyguide.md:1934
msgid ""
"Most `.py` files do not need to start with a `#!` line. Start the main "
"file of a program with `#!/usr/bin/env python3` (to support virtualenvs) "
"or `#!/usr/bin/python3` per "
"[PEP-394](https://www.python.org/dev/peps/pep-0394/)."
msgstr ""

#: ../../google/python/pyguide.md:1939
msgid ""
"This line is used by the kernel to find the Python interpreter, but is "
"ignored by Python when importing modules. It is only necessary on a file "
"intended to be executed directly."
msgstr ""

#: ../../google/python/pyguide.md:1941
msgid ""
"<a id=\"s3.8-comments-and-docstrings\"></a> <a id=\"s3.8-comments\"></a> "
"<a id=\"38-comments-and-docstrings\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1945
msgid "<a id=\"documentation\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1946
msgid "3.8 Comments and Docstrings"
msgstr ""

#: ../../google/python/pyguide.md:1948
msgid ""
"Be sure to use the right style for module, function, method docstrings "
"and inline comments."
msgstr ""

#: ../../google/python/pyguide.md:1951
msgid ""
"<a id=\"s3.8.1-comments-in-doc-strings\"></a> <a "
"id=\"381-docstrings\"></a> <a id=\"comments-in-doc-strings\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1955
msgid "<a id=\"docstrings\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1956
msgid "3.8.1 Docstrings"
msgstr ""

#: ../../google/python/pyguide.md:1958
msgid ""
"Python uses _docstrings_ to document code. A docstring is a string that "
"is the first statement in a package, module, class or function. These "
"strings can be extracted automatically through the `__doc__` member of "
"the object and are used by `pydoc`. (Try running `pydoc` on your module "
"to see how it looks.) Always use the three double-quote `\"\"\"` format "
"for docstrings (per [PEP "
"257](https://www.google.com/url?sa=D&q=http://www.python.org/dev/peps/pep-0257/))."
" A docstring should be organized as a summary line (one physical line not"
" exceeding 80 characters) terminated by a period, question mark, or "
"exclamation point. When writing more (encouraged), this must be followed "
"by a blank line, followed by the rest of the docstring starting at the "
"same cursor position as the first quote of the first line. There are more"
" formatting guidelines for docstrings below."
msgstr ""

#: ../../google/python/pyguide.md:1972
msgid ""
"<a id=\"s3.8.2-comments-in-modules\"></a> <a id=\"382-modules\"></a> <a "
"id=\"comments-in-modules\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1976
msgid "<a id=\"module-docs\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:1977
msgid "3.8.2 Modules"
msgstr ""

#: ../../google/python/pyguide.md:1979
msgid ""
"Every file should contain license boilerplate. Choose the appropriate "
"boilerplate for the license used by the project (for example, Apache 2.0,"
" BSD, LGPL, GPL)"
msgstr ""

#: ../../google/python/pyguide.md:1981
msgid ""
"Files should start with a docstring describing the contents and usage of "
"the module."
msgstr ""

#: ../../google/python/pyguide.md:1999
msgid ""
"<a id=\"s3.8.3-functions-and-methods\"></a> <a id=\"383-functions-and-"
"methods\"></a> <a id=\"functions-and-methods\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2003
msgid "<a id=\"function-docs\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2004
msgid "3.8.3 Functions and Methods"
msgstr ""

#: ../../google/python/pyguide.md:2006
msgid "In this section, \"function\" means a method, function, or generator."
msgstr ""

#: ../../google/python/pyguide.md:2008
msgid ""
"A function must have a docstring, unless it meets all of the following "
"criteria:"
msgstr ""

#: ../../google/python/pyguide.md:2010
msgid "not externally visible"
msgstr ""

#: ../../google/python/pyguide.md:2011
msgid "very short"
msgstr ""

#: ../../google/python/pyguide.md:2012
msgid "obvious"
msgstr ""

#: ../../google/python/pyguide.md:2014
msgid ""
"A docstring should give enough information to write a call to the "
"function without reading the function's code. The docstring should "
"describe the function's calling syntax and its semantics, but generally "
"not its implementation details, unless those details are relevant to how "
"the function is to be used. For example, a function that mutates one of "
"its arguments as a side effect should note that in its docstring. "
"Otherwise, subtle but important details of a function's implementation "
"that are not relevant to the caller are better expressed as comments "
"alongside the code than within the function's docstring."
msgstr ""

#: ../../google/python/pyguide.md:2024
msgid ""
"The docstring should be descriptive-style (`\"\"\"Fetches rows from a "
"Bigtable.\"\"\"`) rather than imperative-style (`\"\"\"Fetch rows from a "
"Bigtable.\"\"\"`). The docstring for a `@property` data descriptor should"
" use the same style as the docstring for an attribute or a <a href"
"=\"#doc-function-args\">function argument</a> (`\"\"\"The Bigtable "
"path.\"\"\"`, rather than `\"\"\"Returns the Bigtable path.\"\"\"`)."
msgstr ""

#: ../../google/python/pyguide.md:2031
msgid ""
"A method that overrides a method from a base class may have a simple "
"docstring sending the reader to its overridden method's docstring, such "
"as `\"\"\"See base class.\"\"\"`. The rationale is that there is no need "
"to repeat in many places documentation that is already present in the "
"base method's docstring. However, if the overriding method's behavior is "
"substantially different from the overridden method, or details need to be"
" provided (e.g., documenting additional side effects), a docstring with "
"at least those differences is required on the overriding method."
msgstr ""

#: ../../google/python/pyguide.md:2040
msgid ""
"Certain aspects of a function should be documented in special sections, "
"listed below. Each section begins with a heading line, which ends with a "
"colon. All sections other than the heading should maintain a hanging "
"indent of two or four spaces (be consistent within a file). These "
"sections can be omitted in cases where the function's name and signature "
"are informative enough that it can be aptly described using a one-line "
"docstring."
msgstr ""

#: ../../google/python/pyguide.md:2047
msgid ""
"<a id=\"doc-function-args\"></a> [*Args:*](#doc-function-args) :   List "
"each parameter by name. A description should follow the name, and be     "
"separated by a colon followed by either a space or newline. If the     "
"description is too long to fit on a single 80-character line, use a "
"hanging     indent of 2 or 4 spaces more than the parameter name (be "
"consistent with the     rest of the docstrings in the file). The "
"description should include required     type(s) if the code does not "
"contain a corresponding type annotation. If a     function accepts `*foo`"
" (variable length argument lists) and/or `**bar`     (arbitrary keyword "
"arguments), they should be listed as `*foo` and `**bar`."
msgstr ""

#: ../../google/python/pyguide.md:2058
msgid ""
"<a id=\"doc-function-returns\"></a> [*Returns:* (or *Yields:* for "
"generators)](#doc-function-returns) :   Describe the type and semantics "
"of the return value. If the function only     returns None, this section "
"is not required. It may also be omitted if the     docstring starts with "
"Returns or Yields (e.g. `\"\"\"Returns row from Bigtable     as a tuple "
"of strings.\"\"\"`) and the opening sentence is sufficient to     "
"describe the return value. Do not imitate 'NumPy style'     "
"([example](http://numpy.org/doc/stable/reference/generated/numpy.linalg.qr.html)),"
"     which frequently documents a tuple return value as if it were "
"multiple     return values with individual names (never mentioning the "
"tuple). Instead,     describe such a return value as: \"Returns a tuple "
"(mat_a, mat_b), where     mat_a is ..., and ...\". The auxiliary names in"
" the docstring need not     necessarily correspond to any internal names "
"used in the function body (as     those are not part of the API)."
msgstr ""

#: ../../google/python/pyguide.md:2073
msgid ""
"<a id=\"doc-function-raises\"></a> [*Raises:*](#doc-function-raises) :   "
"List all exceptions that are relevant to the interface followed by a     "
"description. Use a similar exception name + colon + space or newline and"
"     hanging indent style as described in *Args:*. You should not "
"document     exceptions that get raised if the API specified in the "
"docstring is violated     (because this would paradoxically make behavior"
" under violation of the API     part of the API)."
msgstr ""

#: ../../google/python/pyguide.md:2117
msgid "Similarly, this variation on `Args:` with a line break is also allowed:"
msgstr ""

#: ../../google/python/pyguide.md:2156
msgid ""
"<a id=\"s3.8.4-comments-in-classes\"></a> <a id=\"384-classes\"></a> <a "
"id=\"comments-in-classes\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2160
msgid "<a id=\"class-docs\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2161
msgid "3.8.4 Classes"
msgstr ""

#: ../../google/python/pyguide.md:2163
msgid ""
"Classes should have a docstring below the class definition describing the"
" class. If your class has public attributes, they should be documented "
"here in an `Attributes` section and follow the same formatting as a "
"[function's `Args`](#doc-function-args) section."
msgstr ""

#: ../../google/python/pyguide.md:2189
msgid ""
"<a id=\"s3.8.5-block-and-inline-comments\"></a> <a id=\"comments-in-"
"block-and-inline\"></a> <a id=\"s3.8.5-comments-in-block-and-"
"inline\"></a> <a id=\"385-block-and-inline-comments\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2194
msgid "<a id=\"comments\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2195
msgid "3.8.5 Block and Inline Comments"
msgstr ""

#: ../../google/python/pyguide.md:2197
msgid ""
"The final place to have comments is in tricky parts of the code. If "
"you're going to have to explain it at the next [code "
"review](http://en.wikipedia.org/wiki/Code_review), you should comment it "
"now. Complicated operations get a few lines of comments before the "
"operations commence. Non-obvious ones get comments at the end of the "
"line."
msgstr ""

#: ../../google/python/pyguide.md:2212
msgid ""
"To improve legibility, these comments should start at least 2 spaces away"
" from the code with the comment character `#`, followed by at least one "
"space before the text of the comment itself."
msgstr ""

#: ../../google/python/pyguide.md:2216
msgid ""
"On the other hand, never describe the code. Assume the person reading the"
" code knows Python (though not what you're trying to do) better than you "
"do."
msgstr ""

#: ../../google/python/pyguide.md:2226
msgid ""
"<a id=\"s3.8.6-punctuation-spelling-and-grammar\"></a> <a id=\"386"
"-punctuation-spelling-and-grammar\"></a> <a id=\"spelling\"></a> <a "
"id=\"punctuation\"></a> <a id=\"grammar\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2232
msgid "<a id=\"punctuation-spelling-grammar\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2233
msgid "3.8.6 Punctuation, Spelling, and Grammar"
msgstr ""

#: ../../google/python/pyguide.md:2235
msgid ""
"Pay attention to punctuation, spelling, and grammar; it is easier to read"
" well-written comments than badly written ones."
msgstr ""

#: ../../google/python/pyguide.md:2238
msgid ""
"Comments should be as readable as narrative text, with proper "
"capitalization and punctuation. In many cases, complete sentences are "
"more readable than sentence fragments. Shorter comments, such as comments"
" at the end of a line of code, can sometimes be less formal, but you "
"should be consistent with your style."
msgstr ""

#: ../../google/python/pyguide.md:2243
msgid ""
"Although it can be frustrating to have a code reviewer point out that you"
" are using a comma when you should be using a semicolon, it is very "
"important that source code maintain a high level of clarity and "
"readability. Proper punctuation, spelling, and grammar help with that "
"goal."
msgstr ""

#: ../../google/python/pyguide.md:2248
msgid "<a id=\"s3.10-strings\"></a> <a id=\"310-strings\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2251
msgid "<a id=\"strings\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2252
msgid "3.10 Strings"
msgstr ""

#: ../../google/python/pyguide.md:2254
msgid ""
"Use an "
"[f-string](https://docs.python.org/3/reference/lexical_analysis.html#f-strings),"
" the `%` operator, or the `format` method for formatting strings, even "
"when the parameters are all strings. Use your best judgment to decide "
"between `+` and `%` (or `format`) though. Do not use `%` or the `format` "
"method for pure concatenation."
msgstr ""

#: ../../google/python/pyguide.md:2277
msgid ""
"Avoid using the `+` and `+=` operators to accumulate a string within a "
"loop. In some conditions, accumulating a string with addition can lead to"
" quadratic rather than linear running time. Although common accumulations"
" of this sort may be optimized on CPython, that is an implementation "
"detail. The conditions under which an optimization applies are not easy "
"to predict and may change. Instead, add each substring to a list and "
"`''.join` the list after the loop terminates, or write each substring to "
"an `io.StringIO` buffer. These techniques consistently have amortized-"
"linear run time complexity."
msgstr ""

#: ../../google/python/pyguide.md:2301
msgid ""
"Be consistent with your choice of string quote character within a file. "
"Pick `'` or `\"` and stick with it. It is okay to use the other quote "
"character on a string to avoid the need to backslash-escape quote "
"characters within the string."
msgstr ""

#: ../../google/python/pyguide.md:2319
msgid ""
"Prefer `\"\"\"` for multi-line strings rather than `'''`. Projects may "
"choose to use `'''` for all non-docstring multi-line strings if and only "
"if they also use `'` for regular strings. Docstrings must use `\"\"\"` "
"regardless."
msgstr ""

#: ../../google/python/pyguide.md:2323
msgid ""
"Multi-line strings do not flow with the indentation of the rest of the "
"program. If you need to avoid embedding extra space in the string, use "
"either concatenated single-line strings or a multi-line string with "
"[`textwrap.dedent()`](https://docs.python.org/3/library/textwrap.html#textwrap.dedent)"
" to remove the initial space on each line:"
msgstr ""

#: ../../google/python/pyguide.md:2363
msgid ""
"<a id=\"s3.10.1-logging\"></a> <a id=\"3101-logging\"></a> <a "
"id=\"logging\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2367
msgid "<a id=\"logging\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2368
msgid "3.10.1 Logging"
msgstr ""

#: ../../google/python/pyguide.md:2370
msgid ""
"For logging functions that expect a pattern-string (with %-placeholders) "
"as their first argument: Always call them with a string literal (not an "
"f-string!) as their first argument with pattern-parameters as subsequent "
"arguments. Some logging implementations collect the unexpanded pattern-"
"string as a queryable field. It also prevents spending time rendering a "
"message that no logger is configured to output."
msgstr ""

#: ../../google/python/pyguide.md:2409
msgid ""
"<a id=\"s3.10.2-error-messages\"></a> <a id=\"3102-error-messages\"></a> "
"<a id=\"error-messages\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2413
msgid "<a id=\"error-messages\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2414
msgid "3.10.2 Error Messages"
msgstr ""

#: ../../google/python/pyguide.md:2416
msgid ""
"Error messages (such as: message strings on exceptions like `ValueError`,"
" or messages shown to the user) should follow three guidelines:"
msgstr ""

#: ../../google/python/pyguide.md:2419
msgid "The message needs to precisely match the actual error condition."
msgstr ""

#: ../../google/python/pyguide.md:2421
msgid "Interpolated pieces need to always be clearly identifiable as such."
msgstr ""

#: ../../google/python/pyguide.md:2423
msgid "They should allow simple automated processing (e.g. grepping)."
msgstr ""

#: ../../google/python/pyguide.md:2461
msgid ""
"<a id=\"s3.11-files-sockets-closeables\"></a> <a id=\"s3.11-files-and-"
"sockets\"></a> <a id=\"311-files-and-sockets\"></a> <a id=\"files-and-"
"sockets\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2466
msgid "<a id=\"files\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2467
msgid "3.11 Files, Sockets, and similar Stateful Resources"
msgstr ""

#: ../../google/python/pyguide.md:2469
msgid ""
"Explicitly close files and sockets when done with them. This rule "
"naturally extends to closeable resources that internally use sockets, "
"such as database connections, and also other resources that need to be "
"closed down in a similar fashion. To name only a few examples, this also "
"includes [mmap](https://docs.python.org/3/library/mmap.html) mappings, "
"[h5py File objects](https://docs.h5py.org/en/stable/high/file.html), and "
"[matplotlib.pyplot figure "
"windows](https://matplotlib.org/2.1.0/api/_as_gen/matplotlib.pyplot.close.html)."
msgstr ""

#: ../../google/python/pyguide.md:2477
msgid ""
"Leaving files, sockets or other such stateful objects open unnecessarily "
"has many downsides:"
msgstr ""

#: ../../google/python/pyguide.md:2480
msgid ""
"They may consume limited system resources, such as file descriptors. Code"
" that deals with many such objects may exhaust those resources "
"unnecessarily if they're not returned to the system promptly after use."
msgstr ""

#: ../../google/python/pyguide.md:2483
msgid ""
"Holding files open may prevent other actions such as moving or deleting "
"them, or unmounting a filesystem."
msgstr ""

#: ../../google/python/pyguide.md:2485
msgid ""
"Files and sockets that are shared throughout a program may inadvertently "
"be read from or written to after logically being closed. If they are "
"actually closed, attempts to read or write from them will raise "
"exceptions, making the problem known sooner."
msgstr ""

#: ../../google/python/pyguide.md:2490
msgid ""
"Furthermore, while files and sockets (and some similarly behaving "
"resources) are automatically closed when the object is destructed, "
"coupling the lifetime of the object to the state of the resource is poor "
"practice:"
msgstr ""

#: ../../google/python/pyguide.md:2494
msgid ""
"There are no guarantees as to when the runtime will actually invoke the "
"`__del__` method. Different Python implementations use different memory "
"management techniques, such as delayed garbage collection, which may "
"increase the object's lifetime arbitrarily and indefinitely."
msgstr ""

#: ../../google/python/pyguide.md:2498
msgid ""
"Unexpected references to the file, e.g. in globals or exception "
"tracebacks, may keep it around longer than intended."
msgstr ""

#: ../../google/python/pyguide.md:2501
msgid ""
"Relying on finalizers to do automatic cleanup that has observable side "
"effects has been rediscovered over and over again to lead to major "
"problems, across many decades and multiple languages (see e.g. [this "
"article](https://wiki.sei.cmu.edu/confluence/display/java/MET12-J.+Do+not+use+finalizers)"
" for Java)."
msgstr ""

#: ../../google/python/pyguide.md:2507
msgid ""
"The preferred way to manage files and similar resources is using the "
"[`with` statement](http://docs.python.org/reference/compound_stmts.html"
"#the-with-statement):"
msgstr ""

#: ../../google/python/pyguide.md:2516
msgid ""
"For file-like objects that do not support the `with` statement, use "
"`contextlib.closing()`:"
msgstr ""

#: ../../google/python/pyguide.md:2527
msgid ""
"In rare cases where context-based resource management is infeasible, code"
" documentation must explain clearly how resource lifetime is managed."
msgstr ""

#: ../../google/python/pyguide.md:2530
msgid "<a id=\"s3.12-todo-comments\"></a> <a id=\"312-todo-comments\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2533
msgid "<a id=\"todo\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2534
msgid "3.12 TODO Comments"
msgstr ""

#: ../../google/python/pyguide.md:2536
msgid ""
"Use `TODO` comments for code that is temporary, a short-term solution, or"
" good-enough but not perfect."
msgstr ""

#: ../../google/python/pyguide.md:2539
msgid ""
"A `TODO` comment begins with the string `TODO` in all caps and a "
"parenthesized name, e-mail address, or other identifier of the person or "
"issue with the best context about the problem. This is followed by an "
"explanation of what there is to do."
msgstr ""

#: ../../google/python/pyguide.md:2544
msgid ""
"The purpose is to have a consistent `TODO` format that can be searched to"
" find out how to get more details. A `TODO` is not a commitment that the "
"person referenced will fix the problem. Thus when you create a `TODO`, it"
" is almost always your name that is given."
msgstr ""

#: ../../google/python/pyguide.md:2555
msgid ""
"If your `TODO` is of the form \"At a future date do something\" make sure"
" that you either include a very specific date (\"Fix by November 2009\") "
"or a very specific event (\"Remove this code when all clients can handle "
"XML responses.\")."
msgstr ""

#: ../../google/python/pyguide.md:2559
msgid ""
"<a id=\"s3.13-imports-formatting\"></a> <a id=\"313-imports-"
"formatting\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2562
msgid "<a id=\"imports-formatting\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2563
msgid "3.13 Imports formatting"
msgstr ""

#: ../../google/python/pyguide.md:2565
msgid ""
"Imports should be on separate lines; there are [exceptions for `typing` "
"imports](#typing-imports)."
msgstr ""

#: ../../google/python/pyguide.md:2568
msgid "E.g.:"
msgstr ""

#: ../../google/python/pyguide.md:2581
msgid ""
"Imports are always put at the top of the file, just after any module "
"comments and docstrings and before module globals and constants. Imports "
"should be grouped from most generic to least generic:"
msgstr ""

#: ../../google/python/pyguide.md:2585
msgid "Python future import statements. For example:"
msgstr ""

#: ../../google/python/pyguide.md:2593
msgid "See [above](#from-future-imports) for more information about those."
msgstr ""

#: ../../google/python/pyguide.md:2595
msgid "Python standard library imports. For example:"
msgstr ""

#: ../../google/python/pyguide.md:2601
msgid "[third-party](https://pypi.org/) module or package imports. For example:"
msgstr ""

#: ../../google/python/pyguide.md:2609
msgid "Code repository sub-package imports. For example:"
msgstr ""

#: ../../google/python/pyguide.md:2617
msgid ""
"**Deprecated:** application-specific imports that are part of the same "
"top level sub-package as this file. For example:"
msgstr ""

#: ../../google/python/pyguide.md:2626
msgid ""
"You may find older Google Python Style code doing this, but it is no "
"longer required. **New code is encouraged not to bother with this.** "
"Simply treat application-specific sub-package imports the same as other "
"sub-package imports."
msgstr ""

#: ../../google/python/pyguide.md:2632
msgid ""
"Within each grouping, imports should be sorted lexicographically, "
"ignoring case, according to each module's full package path (the `path` "
"in `from path import ...`). Code may optionally place a blank line "
"between import sections."
msgstr ""

#: ../../google/python/pyguide.md:2661
msgid "<a id=\"s3.14-statements\"></a> <a id=\"314-statements\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2664
msgid "<a id=\"statements\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2665
msgid "3.14 Statements"
msgstr ""

#: ../../google/python/pyguide.md:2667
msgid "Generally only one statement per line."
msgstr ""

#: ../../google/python/pyguide.md:2669
msgid ""
"However, you may put the result of a test on the same line as the test "
"only if the entire statement fits on one line. In particular, you can "
"never do so with `try`/`except` since the `try` and `except` can't both "
"fit on the same line, and you can only do so with an `if` if there is no "
"`else`."
msgstr ""

#: ../../google/python/pyguide.md:2694
msgid ""
"<a id=\"s3.15-accessors\"></a> <a id=\"s3.15-access-control\"></a> <a "
"id=\"315-access-control\"></a> <a id=\"access-control\"></a> <a "
"id=\"accessors\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2700
msgid "<a id=\"getters-and-setters\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2701
msgid "3.15 Getters and Setters"
msgstr ""

#: ../../google/python/pyguide.md:2703
msgid ""
"Getter and setter functions (also called accessors and mutators) should "
"be used when they provide a meaningful role or behavior for getting or "
"setting a variable's value."
msgstr ""

#: ../../google/python/pyguide.md:2707
msgid ""
"In particular, they should be used when getting or setting the variable "
"is complex or the cost is significant, either currently or in a "
"reasonable future."
msgstr ""

#: ../../google/python/pyguide.md:2710
msgid ""
"If, for example, a pair of getters/setters simply read and write an "
"internal attribute, the internal attribute should be made public instead."
" By comparison, if setting a variable means some state is invalidated or "
"rebuilt, it should be a setter function. The function invocation hints "
"that a potentially non-trivial operation is occurring. Alternatively, "
"[properties](#properties) may be an option when simple logic is needed, "
"or refactoring to no longer need getters and setters."
msgstr ""

#: ../../google/python/pyguide.md:2718
msgid ""
"Getters and setters should follow the [Naming](#s3.16-naming) guidelines,"
" such as `get_foo()` and `set_foo()`."
msgstr ""

#: ../../google/python/pyguide.md:2721
msgid ""
"If the past behavior allowed access through a property, do not bind the "
"new getter/setter functions to the property. Any code still attempting to"
" access the variable by the old method should break visibly so they are "
"made aware of the change in complexity."
msgstr ""

#: ../../google/python/pyguide.md:2726
msgid "<a id=\"s3.16-naming\"></a> <a id=\"316-naming\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2729
msgid "<a id=\"naming\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2730
msgid "3.16 Naming"
msgstr ""

#: ../../google/python/pyguide.md:2732
msgid ""
"`module_name`, `package_name`, `ClassName`, `method_name`, "
"`ExceptionName`, `function_name`, `GLOBAL_CONSTANT_NAME`, "
"`global_var_name`, `instance_var_name`, `function_parameter_name`, "
"`local_var_name`."
msgstr ""

#: ../../google/python/pyguide.md:2737
msgid ""
"Function names, variable names, and filenames should be descriptive; "
"eschew abbreviation. In particular, do not use abbreviations that are "
"ambiguous or unfamiliar to readers outside your project, and do not "
"abbreviate by deleting letters within a word."
msgstr ""

#: ../../google/python/pyguide.md:2742
msgid "Always use a `.py` filename extension. Never use dashes."
msgstr ""

#: ../../google/python/pyguide.md:2744
msgid "<a id=\"s3.16.1-names-to-avoid\"></a> <a id=\"3161-names-to-avoid\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2747
msgid "<a id=\"names-to-avoid\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2748
msgid "3.16.1 Names to Avoid"
msgstr ""

#: ../../google/python/pyguide.md:2750
msgid "single character names, except for specifically allowed cases:"
msgstr ""

#: ../../google/python/pyguide.md:2752
msgid "counters or iterators (e.g. `i`, `j`, `k`, `v`, et al.)"
msgstr ""

#: ../../google/python/pyguide.md:2753
msgid "`e` as an exception identifier in `try/except` statements."
msgstr ""

#: ../../google/python/pyguide.md:2754
msgid "`f` as a file handle in `with` statements"
msgstr ""

#: ../../google/python/pyguide.md:2756
msgid ""
"Please be mindful not to abuse single-character naming. Generally "
"speaking, descriptiveness should be proportional to the name's scope of "
"visibility. For example, `i` might be a fine name for 5-line code block "
"but within multiple nested scopes, it is likely too vague."
msgstr ""

#: ../../google/python/pyguide.md:2761
msgid "dashes (`-`) in any package/module name"
msgstr ""

#: ../../google/python/pyguide.md:2763
msgid "`__double_leading_and_trailing_underscore__` names (reserved by Python)"
msgstr ""

#: ../../google/python/pyguide.md:2765
msgid "offensive terms"
msgstr ""

#: ../../google/python/pyguide.md:2767
msgid ""
"names that needlessly include the type of the variable (for example: "
"`id_to_name_dict`)"
msgstr ""

#: ../../google/python/pyguide.md:2770
msgid ""
"<a id=\"s3.16.2-naming-conventions\"></a> <a id=\"3162-naming-"
"convention\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2773
msgid "<a id=\"naming-conventions\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2774
msgid "3.16.2 Naming Conventions"
msgstr ""

#: ../../google/python/pyguide.md:2776
msgid ""
"\"Internal\" means internal to a module, or protected or private within a"
" class."
msgstr ""

#: ../../google/python/pyguide.md:2779
msgid ""
"Prepending a single underscore (`_`) has some support for protecting "
"module variables and functions (linters will flag protected member "
"access)."
msgstr ""

#: ../../google/python/pyguide.md:2782
msgid ""
"Prepending a double underscore (`__` aka \"dunder\") to an instance "
"variable or method effectively makes the variable or method private to "
"its class (using name mangling); we discourage its use as it impacts "
"readability and testability, and isn't *really* private. Prefer a single "
"underscore."
msgstr ""

#: ../../google/python/pyguide.md:2787
msgid ""
"Place related classes and top-level functions together in a module. "
"Unlike Java, there is no need to limit yourself to one class per module."
msgstr ""

#: ../../google/python/pyguide.md:2791
msgid ""
"Use CapWords for class names, but lower\\_with\\_under.py for module "
"names. Although there are some old modules named CapWords.py, this is now"
" discouraged because it's confusing when the module happens to be named "
"after a class. (\"wait -- did I write `import StringIO` or `from StringIO"
" import StringIO`?\")"
msgstr ""

#: ../../google/python/pyguide.md:2797
msgid ""
"Underscores may appear in *unittest* method names starting with `test` to"
" separate logical components of the name, even if those components use "
"CapWords. One possible pattern is `test<MethodUnderTest>_<state>`; for "
"example `testPop_EmptyStack` is okay. There is no One Correct Way to name"
" test methods."
msgstr ""

#: ../../google/python/pyguide.md:2803
msgid "<a id=\"s3.16.3-file-naming\"></a> <a id=\"3163-file-naming\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2806
msgid "<a id=\"file-naming\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2807
msgid "3.16.3 File Naming"
msgstr ""

#: ../../google/python/pyguide.md:2809
msgid ""
"Python filenames must have a `.py` extension and must not contain dashes "
"(`-`). This allows them to be imported and unittested. If you want an "
"executable to be accessible without the extension, use a symbolic link or"
" a simple bash wrapper containing `exec \"$0.py\" \"$@\"`."
msgstr ""

#: ../../google/python/pyguide.md:2814
msgid ""
"<a id=\"s3.16.4-guidelines-derived-from-guidos-recommendations\"></a> <a "
"id=\"3164-guidelines-derived-from-guidos-recommendations\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2817
msgid "<a id=\"guidelines-derived-from-guidos-recommendations\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2818
msgid ""
"3.16.4 Guidelines derived from "
"[Guido](https://en.wikipedia.org/wiki/Guido_van_Rossum)'s Recommendations"
msgstr ""

#: ../../google/python/pyguide.md:2898
msgid "<a id=\"s3.17-main\"></a> <a id=\"317-main\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2901
msgid "<a id=\"math-notation\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2902
msgid "3.16.5 Mathematical Notation"
msgstr ""

#: ../../google/python/pyguide.md:2904
msgid ""
"For mathematically heavy code, short variable names that would otherwise "
"violate the style guide are preferred when they match established "
"notation in a reference paper or algorithm. When doing so, reference the "
"source of all naming conventions in a comment or docstring or, if the "
"source is not accessible, clearly document the naming conventions. Prefer"
" PEP8-compliant `descriptive_names` for public APIs, which are much more "
"likely to be encountered out of context."
msgstr ""

#: ../../google/python/pyguide.md:2912
msgid "<a id=\"main\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2913
msgid "3.17 Main"
msgstr ""

#: ../../google/python/pyguide.md:2915
msgid ""
"In Python, `pydoc` as well as unit tests require modules to be "
"importable. If a file is meant to be used as an executable, its main "
"functionality should be in a `main()` function, and your code should "
"always check `if __name__ == '__main__'` before executing your main "
"program, so that it is not executed when the module is imported."
msgstr ""

#: ../../google/python/pyguide.md:2921
msgid "When using [absl](https://github.com/abseil/abseil-py), use `app.run`:"
msgstr ""

#: ../../google/python/pyguide.md:2935
msgid "Otherwise, use:"
msgstr ""

#: ../../google/python/pyguide.md:2945
msgid ""
"All code at the top level will be executed when the module is imported. "
"Be careful not to call functions, create objects, or perform other "
"operations that should not be executed when the file is being `pydoc`ed."
msgstr ""

#: ../../google/python/pyguide.md:2949
msgid "<a id=\"s3.18-function-length\"></a> <a id=\"318-function-length\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2952
msgid "<a id=\"function-length\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2953
msgid "3.18 Function length"
msgstr ""

#: ../../google/python/pyguide.md:2955
msgid "Prefer small and focused functions."
msgstr ""

#: ../../google/python/pyguide.md:2957
msgid ""
"We recognize that long functions are sometimes appropriate, so no hard "
"limit is placed on function length. If a function exceeds about 40 lines,"
" think about whether it can be broken up without harming the structure of"
" the program."
msgstr ""

#: ../../google/python/pyguide.md:2961
msgid ""
"Even if your long function works perfectly now, someone modifying it in a"
" few months may add new behavior. This could result in bugs that are hard"
" to find. Keeping your functions short and simple makes it easier for "
"other people to read and modify your code."
msgstr ""

#: ../../google/python/pyguide.md:2966
msgid ""
"You could find long and complicated functions when working with some "
"code. Do not be intimidated by modifying existing code: if working with "
"such a function proves to be difficult, you find that errors are hard to "
"debug, or you want to use a piece of it in several different contexts, "
"consider breaking up the function into smaller and more manageable "
"pieces."
msgstr ""

#: ../../google/python/pyguide.md:2973
msgid "<a id=\"s3.19-type-annotations\"></a> <a id=\"319-type-annotations\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2976
msgid "<a id=\"type-annotations\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2977
msgid "3.19 Type Annotations"
msgstr ""

#: ../../google/python/pyguide.md:2979
msgid ""
"<a id=\"s3.19.1-general-rules\"></a> <a id=\"s3.19.1-general\"></a> <a "
"id=\"3191-general-rules\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2983
msgid "<a id=\"typing-general\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:2984
msgid "3.19.1 General Rules"
msgstr ""

#: ../../google/python/pyguide.md:2986
msgid ""
"Familiarize yourself with "
"[PEP-484](https://www.python.org/dev/peps/pep-0484/)."
msgstr ""

#: ../../google/python/pyguide.md:2988
msgid ""
"In methods, only annotate `self`, or `cls` if it is necessary for proper "
"type information. e.g., `@classmethod def create(cls: Type[T]) -> T: "
"return cls()`"
msgstr ""

#: ../../google/python/pyguide.md:2991
msgid ""
"If any other variable or a returned type should not be expressed, use "
"`Any`."
msgstr ""

#: ../../google/python/pyguide.md:2992
msgid "You are not required to annotate all the functions in a module."
msgstr ""

#: ../../google/python/pyguide.md:2993
msgid "At least annotate your public APIs."
msgstr ""

#: ../../google/python/pyguide.md:2994
msgid ""
"Use judgment to get to a good balance between safety and clarity on the "
"one hand, and flexibility on the other."
msgstr ""

#: ../../google/python/pyguide.md:2996
msgid ""
"Annotate code that is prone to type-related errors (previous bugs or "
"complexity)."
msgstr ""

#: ../../google/python/pyguide.md:2998
msgid "Annotate code that is hard to understand."
msgstr ""

#: ../../google/python/pyguide.md:2999
msgid ""
"Annotate code as it becomes stable from a types perspective. In many "
"cases, you can annotate all the functions in mature code without losing "
"too much flexibility."
msgstr ""

#: ../../google/python/pyguide.md:3003
msgid "<a id=\"s3.19.2-line-breaking\"></a> <a id=\"3192-line-breaking\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3006
msgid "<a id=\"typing-line-breaking\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3007
msgid "3.19.2 Line Breaking"
msgstr ""

#: ../../google/python/pyguide.md:3009
msgid "Try to follow the existing [indentation](#indentation) rules."
msgstr ""

#: ../../google/python/pyguide.md:3011
msgid ""
"After annotating, many function signatures will become \"one parameter "
"per line\"."
msgstr ""

#: ../../google/python/pyguide.md:3021
msgid ""
"Always prefer breaking between variables, and not, for example, between "
"variable names and type annotations. However, if everything fits on the "
"same line, go for it."
msgstr ""

#: ../../google/python/pyguide.md:3030
msgid ""
"If the combination of the function name, the last parameter, and the "
"return type is too long, indent by 4 in a new line."
msgstr ""

#: ../../google/python/pyguide.md:3039
msgid ""
"When the return type does not fit on the same line as the last parameter,"
" the preferred way is to indent the parameters by 4 on a new line and "
"align the closing parenthesis with the `def`."
msgstr ""

#: ../../google/python/pyguide.md:3051
msgid ""
"`pylint` allows you to move the closing parenthesis to a new line and "
"align with the opening one, but this is less readable."
msgstr ""

#: ../../google/python/pyguide.md:3063
msgid ""
"As in the examples above, prefer not to break types. However, sometimes "
"they are too long to be on a single line (try to keep sub-types "
"unbroken)."
msgstr ""

#: ../../google/python/pyguide.md:3076
msgid ""
"If a single name and type is too long, consider using an [alias](#typing-"
"aliases) for the type. The last resort is to break after the colon and "
"indent by 4."
msgstr ""

#: ../../google/python/pyguide.md:3098
msgid ""
"<a id=\"s3.19.3-forward-declarations\"></a> <a id=\"3193-forward-"
"declarations\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3101
msgid "<a id=\"forward-declarations\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3102
msgid "3.19.3 Forward Declarations"
msgstr ""

#: ../../google/python/pyguide.md:3104
msgid ""
"If you need to use a class name from the same module that is not yet "
"defined -- for example, if you need the class inside the class "
"declaration, or if you use a class that is defined below -- use a string "
"for the class name."
msgstr ""

#: ../../google/python/pyguide.md:3115
msgid "<a id=\"s3.19.4-default-values\"></a> <a id=\"3194-default-values\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3118
msgid "<a id=\"typing-default-values\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3119
msgid "3.19.4 Default Values"
msgstr ""

#: ../../google/python/pyguide.md:3121
msgid ""
"As per [PEP-008](https://www.python.org/dev/peps/pep-0008/#other-"
"recommendations), use spaces around the `=` _only_ for arguments that "
"have both a type annotation and a default value."
msgstr ""

#: ../../google/python/pyguide.md:3138
msgid ""
"<a id=\"s3.19.5-nonetype\"></a> <a id=\"s3.19.5-none-type\"></a> <a "
"id=\"3195-nonetype\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3142
msgid "<a id=\"none-type\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3143
msgid "3.19.5 NoneType"
msgstr ""

#: ../../google/python/pyguide.md:3145
msgid ""
"In the Python type system, `NoneType` is a \"first class\" type, and for "
"typing purposes, `None` is an alias for `NoneType`. If an argument can be"
" `None`, it has to be declared! You can use `Union`, but if there is only"
" one other type, use `Optional`."
msgstr ""

#: ../../google/python/pyguide.md:3150
msgid ""
"Use explicit `Optional` instead of implicit `Optional`. Earlier versions "
"of PEP 484 allowed `a: str = None` to be interpreted as `a: Optional[str]"
" = None`, but that is no longer the preferred behavior."
msgstr ""

#: ../../google/python/pyguide.md:3170
msgid ""
"<a id=\"s3.19.6-type-aliases\"></a> <a id=\"s3.19.6-aliases\"></a> <a "
"id=\"3196-type-aliases\"></a> <a id=\"typing-aliases\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3175
msgid "<a id=\"type-aliases\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3176
msgid "3.19.6 Type Aliases"
msgstr ""

#: ../../google/python/pyguide.md:3178
msgid ""
"You can declare aliases of complex types. The name of an alias should be "
"CapWorded. If the alias is used only in this module, it should be "
"\\_Private."
msgstr ""

#: ../../google/python/pyguide.md:3181
msgid ""
"For example, if the name of the module together with the name of the type"
" is too long:"
msgstr ""

#: ../../google/python/pyguide.md:3189
msgid ""
"Other examples are complex nested types and multiple return variables "
"from a function (as a tuple)."
msgstr ""

#: ../../google/python/pyguide.md:3192
msgid ""
"<a id=\"s3.19.7-ignoring-types\"></a> <a id=\"s3.19.7-ignore\"></a> <a "
"id=\"3197-ignoring-types\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3196
msgid "<a id=\"typing-ignore\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3197
msgid "3.19.7 Ignoring Types"
msgstr ""

#: ../../google/python/pyguide.md:3199
msgid ""
"You can disable type checking on a line with the special comment `# type:"
" ignore`."
msgstr ""

#: ../../google/python/pyguide.md:3202
msgid "`pytype` has a disable option for specific errors (similar to lint):"
msgstr ""

#: ../../google/python/pyguide.md:3208
msgid ""
"<a id=\"s3.19.8-typing-variables\"></a> <a id=\"s3.19.8-comments\"></a> "
"<a id=\"3198-typing-internal-variables\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3212
msgid "<a id=\"typing-variables\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3213
msgid "3.19.8 Typing Variables"
msgstr ""

#: ../../google/python/pyguide.md:3215
msgid ""
"If an internal variable has a type that is hard or impossible to infer, "
"you can specify its type in a couple ways."
msgstr ""

#: ../../google/python/pyguide.md:3218
msgid ""
"<a id=\"type-comments\"></a> [*Type Comments:*](#type-comments) :   Use a"
" `# type:` comment on the end of the line"
msgstr ""

#: ../../google/python/pyguide.md:3226
msgid ""
"<a id=\"annotated-assignments\"></a> [*Annotated Assignments"
"*](#annotated-assignments) :   Use a colon and type between the variable "
"name and value, as with function     arguments."
msgstr ""

#: ../../google/python/pyguide.md:3235
msgid ""
"<a id=\"s3.19.9-tuples-vs-lists\"></a> <a id=\"s3.19.9-tuples\"></a> <a "
"id=\"3199-tuples-vs-lists\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3239
msgid "<a id=\"typing-tuples\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3240
msgid "3.19.9 Tuples vs Lists"
msgstr ""

#: ../../google/python/pyguide.md:3242
msgid ""
"Typed lists can only contain objects of a single type. Typed tuples can "
"either have a single repeated type or a set number of elements with "
"different types. The latter is commonly used as the return type from a "
"function."
msgstr ""

#: ../../google/python/pyguide.md:3252
msgid ""
"<a id=\"s3.19.10-typevars\"></a> <a id=\"s3.19.10-type-var\"></a> <a "
"id=\"31910-typevar\"></a> <a id=\"typing-type-var\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3257
msgid "<a id=\"typevars\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3258
msgid "3.19.10 TypeVars"
msgstr ""

#: ../../google/python/pyguide.md:3260
msgid ""
"The Python type system has "
"[generics](https://www.python.org/dev/peps/pep-0484/#generics). The "
"factory function `TypeVar` is a common way to use them."
msgstr ""

#: ../../google/python/pyguide.md:3264
msgid "Example:"
msgstr ""

#: ../../google/python/pyguide.md:3274
msgid "A TypeVar can be constrained:"
msgstr ""

#: ../../google/python/pyguide.md:3282
msgid ""
"A common predefined type variable in the `typing` module is `AnyStr`. Use"
" it for multiple annotations that can be `bytes` or `unicode` and must "
"all be the same type."
msgstr ""

#: ../../google/python/pyguide.md:3294
msgid ""
"<a id=\"s3.19.11-string-types\"></a> <a id=\"s3.19.11-strings\"></a> <a "
"id=\"31911-string-types\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3298
msgid "<a id=\"typing-strings\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3299
msgid "3.19.11 String types"
msgstr ""

#: ../../google/python/pyguide.md:3301
msgid ""
"The proper type for annotating strings depends on what versions of Python"
" the code is intended for."
msgstr ""

#: ../../google/python/pyguide.md:3304
msgid ""
"Prefer to use `str`, though `Text` is also acceptable. Be consistent in "
"using one or the other. For code that deals with binary data, use "
"`bytes`. For Python 2 compatible code that processes text data (`str` or "
"`unicode` in Python 2, `str` in Python 3), use `Text`."
msgstr ""

#: ../../google/python/pyguide.md:3318
msgid ""
"In some uncommon Python 2 compatibility cases, `str` may make sense "
"instead of `Text`, typically to aid compatibility when the return types "
"aren't the same between Python 2 and Python 3. Never use `unicode` as it "
"doesn't exist in Python 3. The reason this discrepancy exists is because "
"`str` means something different in Python 2 than in Python 3."
msgstr ""

#: ../../google/python/pyguide.md:3324
msgid "No:"
msgstr ""

#: ../../google/python/pyguide.md:3331
msgid ""
"If the type can be either bytes or text, use `Union`, with the "
"appropriate text type."
msgstr ""

#: ../../google/python/pyguide.md:3343
msgid ""
"If all the string types of a function are always the same, for example if"
" the return type is the same as the argument type in the code above, use "
"[AnyStr](#typing-type-var)."
msgstr ""

#: ../../google/python/pyguide.md:3347
msgid ""
"<a id=\"s3.19.12-imports-for-typing\"></a> <a "
"id=\"s3.19.12-imports\"></a> <a id=\"31912-imports-for-typing\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3351
msgid "<a id=\"typing-imports\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3352
msgid "3.19.12 Imports For Typing"
msgstr ""

#: ../../google/python/pyguide.md:3354
msgid ""
"For classes from the `typing` module, always import the class itself. You"
" are explicitly allowed to import multiple specific classes on one line "
"from the `typing` module. Ex:"
msgstr ""

#: ../../google/python/pyguide.md:3362
msgid ""
"Given that this way of importing from `typing` adds items to the local "
"namespace, any names in `typing` should be treated similarly to keywords,"
" and not be defined in your Python code, typed or not. If there is a "
"collision between a type and an existing name in a module, import it "
"using `import x as y`."
msgstr ""

#: ../../google/python/pyguide.md:3372
msgid ""
"<a id=\"s3.19.13-conditional-imports\"></a> <a id=\"31913-conditional-"
"imports\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3375
msgid "<a id=\"typing-conditional-imports\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3376
msgid "3.19.13 Conditional Imports"
msgstr ""

#: ../../google/python/pyguide.md:3378
msgid ""
"Use conditional imports only in exceptional cases where the additional "
"imports needed for type checking must be avoided at runtime. This pattern"
" is discouraged; alternatives such as refactoring the code to allow top "
"level imports should be preferred."
msgstr ""

#: ../../google/python/pyguide.md:3383
msgid ""
"Imports that are needed only for type annotations can be placed within an"
" `if TYPE_CHECKING:` block."
msgstr ""

#: ../../google/python/pyguide.md:3386
msgid ""
"Conditionally imported types need to be referenced as strings, to be "
"forward compatible with Python 3.6 where the annotation expressions are "
"actually evaluated."
msgstr ""

#: ../../google/python/pyguide.md:3389
msgid ""
"Only entities that are used solely for typing should be defined here; "
"this includes aliases. Otherwise it will be a runtime error, as the "
"module will not be imported at runtime."
msgstr ""

#: ../../google/python/pyguide.md:3392
msgid "The block should be right after all the normal imports."
msgstr ""

#: ../../google/python/pyguide.md:3393
msgid "There should be no empty lines in the typing imports list."
msgstr ""

#: ../../google/python/pyguide.md:3394
msgid "Sort this list as if it were a regular imports list."
msgstr ""

#: ../../google/python/pyguide.md:3402
msgid ""
"<a id=\"s3.19.14-circular-dependencies\"></a> <a id=\"s3.19.14-circular-"
"deps\"></a> <a id=\"31914-circular-dependencies\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3406
msgid "<a id=\"typing-circular-deps\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3407
msgid "3.19.14 Circular Dependencies"
msgstr ""

#: ../../google/python/pyguide.md:3409
msgid ""
"Circular dependencies that are caused by typing are code smells. Such "
"code is a good candidate for refactoring. Although technically it is "
"possible to keep circular dependencies, various build systems will not "
"let you do so because each module has to depend on the other."
msgstr ""

#: ../../google/python/pyguide.md:3414
msgid ""
"Replace modules that create circular dependency imports with `Any`. Set "
"an [alias](#typing-aliases) with a meaningful name, and use the real type"
" name from this module (any attribute of Any is Any). Alias definitions "
"should be separated from the last import by one line."
msgstr ""

#: ../../google/python/pyguide.md:3429
msgid ""
"<a id=\"typing-generics\"></a> <a id=\"s3.19.15-generics\"></a> <a "
"id=\"31915-generics\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3433
msgid "<a id=\"generics\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3434
msgid "3.19.15 Generics"
msgstr ""

#: ../../google/python/pyguide.md:3436
msgid ""
"When annotating, prefer to specify type parameters for generic types; "
"otherwise, [the generics' parameters will be assumed to be "
"`Any`](https://www.python.org/dev/peps/pep-0484/#the-any-type)."
msgstr ""

#: ../../google/python/pyguide.md:3453
msgid ""
"If the best type parameter for a generic is `Any`, make it explicit, but "
"remember that in many cases [`TypeVar`](#typing-type-var) might be more "
"appropriate:"
msgstr ""

#: ../../google/python/pyguide.md:3469
msgid "<a id=\"4-parting-words\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3471
msgid "<a id=\"consistency\"></a>"
msgstr ""

#: ../../google/python/pyguide.md:3472
msgid "4 Parting Words"
msgstr ""

#: ../../google/python/pyguide.md:3474
msgid "*BE CONSISTENT*."
msgstr ""

#: ../../google/python/pyguide.md:3476
msgid ""
"If you're editing code, take a few minutes to look at the code around you"
" and determine its style. If they use spaces around all their arithmetic "
"operators, you should too. If their comments have little boxes of hash "
"marks around them, make your comments have little boxes of hash marks "
"around them too."
msgstr ""

#: ../../google/python/pyguide.md:3481
msgid ""
"The point of having style guidelines is to have a common vocabulary of "
"coding so people can concentrate on what you're saying rather than on how"
" you're saying it. We present global style rules here so people know the "
"vocabulary, but local style is also important. If code you add to a file "
"looks drastically different from the existing code around it, it throws "
"readers out of their rhythm when they go to read it. Avoid this."
msgstr ""

